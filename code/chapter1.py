from lib import spacedPrint
from kmp import kmp

#################################
######## PATTERN COUNT ##########

#Counts how many times a pattern occurs in a string
def patternCount(text, pattern):
    count = 0
    patternLength = len(pattern)
    for i in range (len(text) - patternLength + 1):
        if pattern == text[i:i+patternLength]:
            count+=1
    return count

# text_pc = "GCCCTGCTCTCTGCTCTCAAGGTTCACCTGCTCTGCTGCTCTCCACTGCTCTTAACCTGCTGCTCTCTTACTGCTCTCTGCTCTGCAAGGACTGCTCTCCTGCTCTTCTGCTCTCCTGCTCTCGATCTGCTCTCGCAGGATACACTGCTCTGGACTGCTCTGCTGCTCTCCTGCTCTCGCTGCTCTTTATCTGCTCTCCTGCTCTCCTGCTCTCTTATCTGCTCTAACTGCTCTGTATCTGCTCTTCCTGCTCTTCTGCTCTCTGCTCTCTGCTCTACTGCTCTAAGAAGCCTGCTCTCTGCTCTCTGCTCTAAGGGTACTGCTCTGCTGCTCTTGCTGCTCTAACCTGCTCTAGGGCTGCTCTCTGCTCTCTGCTCTCGCTGCTCTGACTGCTCTTTCCTGCTCTCTGCTCTGCTCTTGCTGCTCTCTGCTCTCTGCTCTGCTGCTCTACTGCTCTCCTGCTCTCTGCTCTGTTCTAGCTGCTCTACTGCTCTCTGCTCTACGACTCTGCTCTCCTGCTCTCTCTGCTCTACCCTGCTCTCTGCTCTCCGCTGCTCTTTGTGGAAATCTTCCTGCTCTTGCTGCTCTACATGACTACTGCTCTGCCCTGCTCTCCTGCTCTTCTGCTCTCTGCTCTGTGCCTGCTCTCTGCTCTCATACTAGACCATCTGCTCTCACTGCTCTCTTCATCTGTTTCTCCGGCCATCTCTGCTCTCTGCTCTCCTGCTCTCTCGATCTGCTCTTGTACCTGCTCTTCTCTGCTCTCTGCTCTCTGCTCTACCTGCTCTCTGCTCTTTCTGCTCTCTGCTCTAACAAGGTCTGCTCTACTGCTCTGACCTGCTCTTTAGCTGCTCTTCTGCTCTGCTGCTCTAGTTCTGCTCTCTGCTCTCTGCTCTGCTGCTCTCCCTGCTCTCTGCTCTCTGCTCTTAACTGCTCT"
# pattern_pc = "CTGCTCTCT"
# print(patternCount(text_pc, pattern_pc))

###################################
######### FREQUENT WORDS ##########

#builds a frequency table of the patterns of length k occuring in a string
def frequencyTable(text, k):
    freqTable = {}
    for i in range (len(text) - k + 1):
        currPattern = text[i:i+k]
        if currPattern in freqTable:
            freqTable[currPattern] += 1
        else:
            freqTable[currPattern] = 1
    return freqTable
#print(frequencyTable("ACGTTTCACGTTTTACGG", 3))

#finds the maxValue in a dictionary representing a frequency table
def maxMap(dictionary):
    maximum = float('-inf')
    for value in dictionary.values():
        if value > maximum:
            maximum = value
    return maximum
# print(maxMap(frequencyTable("ACGTTTCACGTTTTACGG", 3)))

#finds the most occuring patterns of length k in a string
def frequentWords(text, k):
    freqTable = frequencyTable(text, k)
    maximum = maxMap(freqTable)
    patterns = []
    for pattern, frequency in freqTable.items():
        if freqTable[pattern] == maximum:
            patterns.append(pattern)
    return patterns

# text_fw = "TCTGGCCAATTATAACGGTCTGGCCAACGTCTGGGTTCTGGCCAACTAACATCGTCTGGGTTCTGGCCAATCTGGCCAATCTGGCCAACTAACATTCTGGCCAATCTGGCCAACTAACATTTATAACGGAACCAGGCTTATAACGGCTAACATTCTGGCCAAAACCAGGCAACCAGGCTTATAACGGCTAACATCGTCTGGGTCTAACATCGTCTGGGTTTATAACGGTTATAACGGAACCAGGCCTAACATTTATAACGGTTATAACGGCGTCTGGGTTTATAACGGCGTCTGGGTTCTGGCCAACTAACATTTATAACGGTTATAACGGAACCAGGCCGTCTGGGTTTATAACGGTTATAACGGTCTGGCCAACGTCTGGGTTTATAACGGAACCAGGCCTAACATAACCAGGCAACCAGGCTCTGGCCAACTAACATTTATAACGGCGTCTGGGTTTATAACGGCGTCTGGGTTCTGGCCAATTATAACGGTTATAACGGAACCAGGCAACCAGGCCTAACATTTATAACGGAACCAGGCTTATAACGGTCTGGCCAATTATAACGGCTAACATTTATAACGGCGTCTGGGTCTAACATCGTCTGGGTCTAACATCTAACATTTATAACGGCGTCTGGGTCTAACATTTATAACGGTCTGGCCAATCTGGCCAATTATAACGGTTATAACGGAACCAGGCAACCAGGCTTATAACGGTTATAACGGTTATAACGGAACCAGGCCGTCTGGGTTTATAACGGTTATAACGGTCTGGCCAATTATAACGGCTAACATCGTCTGGGTAACCAGGCCTAACATCGTCTGGGTCGTCTGGGTTCTGGCCAACGTCTGGGTCGTCTGGGTCGTCTGGGT"
# spacedPrint(frequentWords(text_fw, 13))

#########################################
############ REVERSE COMPLEMENT #########

#given an ADN strand, returns its reverse complement
def reverseComplement(string):
    complements = {'A':'T', 'G':'C', 'C':'G', 'T':'A'}
    revComplem = ""
    for char in string:
        revComplem = complements[char] + revComplem
    return revComplem

# text_rc = "CACAGCTAAGAGATAGCTGTTGCCACCCCTATCACGGCTTGTTTCTCGTGTTGCGGGCCACGTTATGTCGCTTCTTGTAAAGGCCGCTGTAGACGGGAACCAAATCTAAATGTACGGTTACGCTACGAGACTCAAAATCCTGCCTGGCAGAATCGTGCCCGTCAATCTTTGTCGAAATTTGTTTAATACTCGACCGAACCAGGAGAGTCAACTATCAGGGGGAGTAGGACCGCACCTGACATCTCTATGAAGATGGAACGCAAGTTTGGAGATCCTCCGGTAACGATAGGTACTTGCAACACATGTTCTGGGGAATAGTCGCAAGTGGCTTTGGAATAAGAGCTGTTCCGGTCCTTACCTCGCGGCATCCGAATCCTGACCCACGAACTCGGTTATATCTCTCTTGCGCCATGTTGAAGAGGAACATTTCCTTTGGGACAAGCAAGAATTTATCAGCTTTAGTATAGAAATTGCTTATAATCCACAGGCACTTTCATTTCTGTAATTTAGGGATAGTTCTGAGGCTGGTAGTTGAGCGTGAGGACTTGCTTCGGACGACAGCGCTAGGGGAAAATGTGCGCTAGTTTTTCTGCCATTGGATCCTATCTTAGCGTATGCGCCCATAGTCATATCAGCACACGAAGCTGTTACTCGTGACGTCATTGCTGCAACAAGATTGGCGCAAAGATGCTAACGAGATCGCGAGTCGAGATTAGAGTGTGTTGGCTCAGCGCCAGCTTCCTTGTATTGCATAAGCTTCGAAGCTCTAATTACAGCTAGGCTGGGCGTGCCAATGACTTACCGTACAGCTGACCAAATTGATCGGTTATCCGGATAGTCTAGAAGCAGCAGTCACTGACGCAATTATGGATATAGTCGACGACGCCGAACTTTTTAGCTACCGTGCCTGCCTTCAGCCAAATATCCACTCTAATTTTGGTGGCCAGTCCGTCTCAGCACCCCCGGTTCGAAGTAGTAAGGCCAATACGCCGACGTTGTGTTCAAGCACACTGTTTTGAAGCCGAGCTGGGAATTTTGATGGATAACTTGAGGATTCCGCAATTGGATTCGTTACCTCTATCTTATTACGCTGCAACAACTAGGGACGTAGCTTAGAATAGATGGAGATAATCTAACCTGACGAAAGAGCCTTACTAATTATCGGCTTCTGCGCTGTCGAAATTCTGGTGTCCGAGCTGGGTAGGGTCGCGCTGAGACCACTACATGTACCTAATCACGGCTCACAGTATCAAGGAGAGCCGATGGTTGTAGTAAATGCTATGCAATAAAAGCCGTCAGATCATCCTAGATTTGAGCCCCGCCAGTCCCATAATCACTGAGGCACCTTACATTGAAGCGAAGTTCTTCGCGAACTTGGAGCAGCGTACCAAGTGATCTTAAAGCAGAAAAGCGGTAAATTCAATGGAGGTGAACTGTATGCTGCTGCGGCTACGATAGGCCCTATTGCTTAGGAAAAAATTCCAAACCGAAAAGCAGAACGGAAGACCATACGAAGGCCATCTAGCACCCTAACTAATATCGCAATCTTGCGCACCTACTGCCTGGTCATAAACTCCAACCCAGCGAATACCGACAGAATTGACTGTGTGAACTTGCTAATCAGGTATCGCTACGTTTTCATCGAGCCTCTCGGGGCTTTTTCCGATGCCAGGGCTTTCCGTGTCAGCAACGAGGGTTTGGAGTATAAAGTCCTGGGAAATATGACCTATACCTCCGAACGGCGTCCGTCGGAGACGGCTTCGGCAGGAGGCAGCAACCCCCATCGCCGTACGCGTAAGCAGGTACACTCGGCAGATCAACTTCCTACTTCCTACGAGTGGGTATGTTATGGCTTGCCAGATTATCATCGTGGTCCGTATTTTTAAAGCCTCGTAGCTAATTGCAGAACACCTCGGCCAACCAACGAGAAGACCCTGCAACCTTCATTCATGTTCGATCCCTTGATTTCTGCGCCGATGGTTAATTCGTAGCCTACAGCCATGCGTGTACCGACGTGATTAATGCTGGGCTTACTATTTTCGGGTGCCTCGTCATACACTGTATCCCTGAACCGCGGCATGTGAATGCAAGTGGATGGATGTAGAGGCCCCGTCTTGCGGTCCTGAAATGCGAACTGTCCCCCACTTGCTAGTCCTATGAATACACCGTCGTCAACGGCAACAGCTCTTCTTGAACGCAACTTATTTCCCGGGTCTTCTAAGGCAGGGGGAGCTGTGCTGTGGCGGAGTAACCTGGTGGACCAAGGTGTCGTGGGAAAACGCTAGTTTTCCTGTTAATCCTGAAACCGTTATTCTTTCGTGCGCCGTTTCAAATAGTCGTAAAGCTAAGTTATCCTTTTGCATTGTTCCTATCGTGTTCTGAAAACCGTCGCTTTTGCTCGCGGGTGGTTCATATTCATACGTTAGCGTTCCATTGGTTCCGCAATTAATTCTGTTTGTCCCCGTGTCTGCACCCGTTGCGCGTTGGGCGATCATGGGGATTCATATAATCCAAATTTAATGTTTGTGGCAGGACAGCTCTTGATTATCGATGGGGAGGCCGAGAACGCTTGATCCCGACTAAATGATGGCTGCATCTTAAGAGGGGAATGGCCGTCGTCGACGACCCGTATGCAGGGAGATTAACTTAATGACTCGCTCCCCCGGCTGAGCAACCCATCGTGGACCCCCAGCGTATTATTGTGCAAAAAACGTGTCTAAATAGCGGGAAGTCAGGGCCGCATTTGAGCACCGGTCGATTCAGGGATTATAGCCTGTTTCTATGCTGCTTCAACTAAAATCTAGCGTTGACATCAAAACCGCCAAGGCTTTCAGTCCGCCGGACGCTACCAGATCGAGTCTGGAAGTACCATGCGGAGTACATAGCATGTAAACCTACCATAGCGAAAACCACCGGACTACTAGGTTGCGTCCTAGGCTATGTTGTGAGTCCTCAGTGCTGCAGTACTGTGATCCATGCGAAACAAATTATTGAGCATCTTAGCGGCCATGAACTGCTCAGACTTGTATGTCCCCGGCACGAAGGCTATCAGAGAGTGAAAGTTGATAACGGTACATGCTGATTAATTTCAGGCTCTAAGGAAATACGCTTATGAAAGATTTTATATTCCTGCGCAAGATTTGACTGGAGACAAAACTCGGTATGTACGGCCTGGGGTTTTCCACTGGCTGCTGTGCTGGATACATGTCGTTTTGGGTCATCGAATTGCAGCCAAAAGACGTGGCGAGCCTTATTACTAATGGACGGATCCAAGGAGACTCAAATCGCTGTATCGTGGATCGTTGGCGCCAAGCGCCCTAGGGTTTGTACTCCAGATATAAGTTAACTTTCGTCTCCCGACCAGAAACCTCGCCTTGATGCAAAGTAGACCGGTATAGGTTGTGCCATCACTTACGGAGCCAAACCCAACCTATTACGTTGCATAAGAGCTATGAAGGGCATTCGCGCTTGCAAGGTATTTTCATCCTTTGTTGGGTTCCGCACAGCAAGGCGCTTGAACTGCTTTCCGGACGTGCATCCCCTCGCCCAAGACGAGCGTGATTCACCATCTTACAGGTAACAGGCTGACCGTCTTGGTCAGATGGTGGCGGTACCCCAATCTACTGGTCGAACGTGACTGTCTGAATGCCCCCATTCTCGAAGGTCGGACCGTATGATCCTTTTCCTGAGATCAGTAGGTGTATTGCTAGTATTTTAGATTTGCATTTCCGCTCTATTGACCGAGGTCCCGCTAGGGGATTTAACTCATTCCCAGCAGCACCTCTAACAGCCTCGGAGTTAGAGCGACTTGCCGGCCGCAGAATAGAAGTATTCGACGCCTCTGCCAATCTAGCACCATATGTGGTAGCCCTCTCGTTTCCGGCGCTAGATAGTCACCTGGGCGTTCCTAGCGTCATCCATGCTGTCGAGGGCTTCTTTGAGGCTCCGCGTCGCTGTGACGGCTTTAGTGCTCATTGGCGCCAGCTTCTGGTGATCGTTACCAACGTGTAGCACCAAACTTTTTGCGTATTCACTGTTATAAGAAATATTCGGTTCCATGTCTGCTGGAGTGTTCGCTCATGTCGATTCGGAAGCTCTCGAGCAATTCATGCGGTCGCCCCAGCTATGATACTGTGAAGCCTACCGCTAAGGTCGTCTGTGTCGACAGAACCACAACCGACCCCCTGGTAATGGTAAAACATTACTCGCAGTAAATGGTCATATGTTCCTCATTACACGGCCCTCGCTACGTTGTTGCAGTAGTTAACACGCTCAAACTCTTATCTCCTCGGAAGGCAACGCCCGCGACTGACAACCCAGCTTTATCACTTCCCGTCCGGGTCAGAGGCGGATGTCTAAGTAAACATAGTATACCGGTTTTGCTGCCTAACGGCTAAGGTATGTCCCCTTTTCAAGAGTGCTACTATTATCGCATATGGGCCTGGATCTGGAGTCTCGCTATATCCGTCAGAGAGACAAGGTCCTGTTCGCCTTACGCTCATGCTGGAAGGGTCGCATTTACCATCGCTCCAGCACCTTCAGATATATTAACAGGAGATTATCCTACGAGATTTAGTAGCGTAATTTCTCACCTCAGAAGCAACGACCGGATTGAATAAGATGCATTCCCGATATTTTGCAGACTACCAGCTACCGCAGGACACGCGTCGATGCGAGCGGAAAAATTGTGCAGCCTGGATTGCGTCGCGCAGCCCACACCACCCATCACAGACTTCGGGATCGCGTGTATCGGACATTCACGTTCATTCGGCGGGATAACGATCTAGCGTCAAACGGGTTCGACTGTGCGGAGACTATGCTGATTGCTTAAACAGCCTCTGTACAGCTTCTTCTCCCATGTCTATCGAACCTGAGCTGGGCCAAATCTGTCAGCAGCACTAGTCCAAGGCAGAATTGTAACGGTCGCAGCGTTGGGACTATTCATTTTTCTTTAAGGCTAAATGCTGAATGCGACTACAGATACCCTAAGGTACCATGTTAAGTCCTAGACGCTATTTCAGTCGTTCTATATCATCTCGCAAATAATCACAACAGAGGTGTAACCTGAAAGCCTGTCCCGGTACACCTAGTACCCACCTTTTTAGCTATCGGTATTTCCTTCGTAGGTTGAAAATGCAAGAAGGAGGATCGTTTCGATGTACACCTAAATACTTACGTGAAGGAGGGGCGTATTTGTGCCCCTATCGAAGTAAACGAAAATCCAAAGGATCGAGACGCCTGGTCAGGATTTTGACTAGAGGTACCGGCGTCAGAAGATGGCGGTGATGGTTGCGTCCGATGATGTGAAAATTAACTTACTCAGACTCTCCAGATTCATGATATGCATATTGCGTAATCTGTTGTCGCCATTCATTAAAGGTTTATTACTCTCGTGAATTAAACCGCTAATATGCGAGATTATCGAATCAGCTATTGATCAAGGCATTCGGAATCCGCAAATACAGTCACCCGGAAGGTAACTCTTTCAGTTCCTCTGGCAACCGGTCCGACTCACGTGGGGGAGAAAAGAGCTTATAGCTATTTGTCTAATCTTATTTGTCCTCCCCCTTCCGACGGGATAAGTCTCAATTTTACCATGGCAATATAGCTGTCGCAACACGAACAGCGAAATTCGAGTCGACGTACACATCGTCTCTCCATGGGCTTACGTGTCAGGTCGGCCAGAAAACGATGGTATGATTGAGTAGAAGGGCCCCATAATCTTCAGACCGCCGCTGCAGCGTTAATTTGCGTAGGTTATGCCTGTGGTCGCCAGACGGGTGTATTTAGGATTAGAGTCGCATAAACCTGGTCATAGAGGCTAGTAGCAGAGAAACTAGGTGCGCCCTAGGGCACTAGAATAGCTTGGGGCGGGGCCTCTCAGCTAGTTGACAGTGGTAAGAGTACTGGGGTTAATTTCGTTCTTGTTGCCAGGGTGGGTTAAGCATTGAGCTTCCAAGCCTCTTTCACTATGGCTTAGAATAGGTCTGTATGTGAGAGTTAAGTATTTAACTATCCCAGGGAATCGAAAAACGGGGCCGGCTCAGTTATTTCCAAATCACATACCATCAGCTTAAGCTACGAACCGCTAATACTATCTCAATCCTATGGTCCAAAAATTTAGTGGAGTCCCTACTCTCCGTGGCGGTTTACCTAAAATGAACCAAAAGCTGTGAGGCGTCTCTGATGGAGGGACTGTTCTATATCGGGCGTATGCTTCGTTGGGCGGGCCGATAAGTCAGCTATGTATGAACGAGATACCGTGAGAGCTACCAAAGGTGCTACATTACCAGGTCAGATGCGCGGCTACGCACTACGCTAAGTTTAACAGAGATATGCGGACCACATTCAGAAAAGCTGAACACGCGTGATGAACCCACTTTCCGCTCGCGCAGTGCGGGAGGGTTAGGGCGGGCATTACAATGGGGCCCAAATTAAACCGCGTCATTCTGGGACTGTGGGGGTAATGCTAACGCTGGCTACAGGAGGCCCCGATAAAGTGTGGTTCAGTGGATCCGCCGACCATCCTATAAGGGCCGTGGTAATCCCGCCGTATTCTTCATGTCGTGTTCCACCGGCAGTGTTAATTAGGGCTACCGCCTAGAAATGCTATGAAGCAAAATTCGGCGTATAATAGACTGGAGATCACCATCCTCTAGAGTAGAGGGAACCATAGATACTGACGGCTGCGGTCTTGTACTAGGTCTGCCTTGCAAGGGCTCCTCGAGGCTAATACTCCGAGGCGCTGTCCGTAGTGGATAGCAGTGTGACAGCCCGGGAGCTATATATTCTTCGCTGCCGGAGACCGGACCCTAGCTCTGCCGGAACAGGAGACTTCCGAACCCTTTAGTAGGAAATTCCTAGTTGTTCACGCTGAAATATCGTCACCTGTGTATCCTAGAAGTAGCAATCGCCGGTGCCACGATTTTTCCTAAGGCGGCGTCTCTCTAGTCCAATGTGATAAGGCGACCACGTTTATGTACCTTAGAGACAAAAGTAACGTATTCAAAAAGTGGAAGGTAGGGAGATTTAGGGGTAGTATCGCCTTTCTGGCGATCACATCTTGTAAGGCGCCTCCAGGATGATCATGGAGATTTAAGACTCGAAGAACCCAACCTTAACACATAAATTCGAATTTAGGGAGTCCACTGTGGAGCTGCTGTCCACCCCGCGCGCCCTGCTCATGTGGTGACTGAATTTTGGGTGTATCATATGTTCTAAGGTAGTCAGTAGATTGACACGTTCCACCAACGTATTAAACTCTGAACAGGCGAGAGGTCCTTCTATCGGGACGGGTATATAATTCCCATTTTCGAACTCATCAGCCAGTACCTCACGGCTACAGGGCCTACCTGATATTTAACCTGATGAGCTTGAATGTGACCCCCATCAGCCAGAACTCATGGCGCAACGCCGCTGTTTGGATAACAAGTGGCTCATTCGGGGTAAAGCGAGATCGAAACGGGGCTGTACTCGCAGGTTTGACGGAACTATTATTTAGGGTCCGGTCACACGCTCCCTGACGGAAGAATGCGTTTGATCTCGAGGCGATGAAAAGCCACATCAAAAGCCCCAATTGAGAGAATTGGAATATAACGTAAATGTAGGGCCTTGCCCTGGTTGCACAAGTAACTAGTAACGCTAGGTATGACCCGCAGCCACCGGTGCAAGTGTCAGTCTGGTCATTATACTTATGTCGCTTTACTTTAAGGTTAATGGGGGGCGGCGGTCTTCCCAGCAAAGAAGAATTTCGGTGCTAGTTGCCCCCGTTTGGGGTCCTACAACGTGGATCAGTGGGGCGCCAGGACCGTTGACGGGTACGGGAAAGCGGCCAGTGACTCGAGCGGTTCTTTGCGAGGACCTTTATAAAGCACACTGGTGTAAGGGGCTTTAATATTCTATACCTCATGAATTCGCGTCAGTTCTTCTCCAGCAGGAGATATTGGAACAGCTATATTTACCGATCGCGAGACTGAAGGAAGCGTCTAGCAAGTAAGCTACGCTACCTGTGGGGCCCTCCAAGGACGTGGGGGTTAGCCGCGGTGATTAGCGGCCGTCAATTTCAGGAGGGGGGGAGATAATACGCGATAGGAAACAGCTTGGGGAAACATTCAACAATCGAATGGATTATAGCGATCGAAGATATGTACCTCATAGCACAACGATCAAAATAAGTGAGGAGTCGCACTGTATACAATATGAGAGCACTGCCCGGTCCAGTAGTTCGAACAAGGGGCAAGCGCCCAGTGCTAACTACCTTCACACCTCTCATACCCAGGCGCAGGCCACCTCTGGGTGGGAGTGAACGTCGCGCTGAGTCTCACATGTTAATATACCTTGCACACGGGTAATCTGCCTTTTTAGCCATTCTGCCGAGCCGATCGGCGTTCGCCACTGTCACGTGCCTTCCCTAATTTGCTTATTATTCTGTCCGATCCCAATTGCAGCTTCTAGTCATTGTTACTAAACACAATGGAAGGCTATTGCCAAAGGGTCTACAATGGGGGTGTAAGGAGTAACAAGGATTGGTAACAGCTATTTGGGCCGGGAAGTAACACCATTCCAAAGGATTAGCTGTATCACGTGCCCCCGAAAGGAGAGCACTTCCGGCCTGCCATGAGGATCCCCGGCGTCCGCGGCATGCCTGCAGTGTCTTTCGTGAAAGTTATAGGCGGGGGTAACCGCCTTGAGACCCGTAGTTCGGCTTAATGAATAGCTGCGCGCTGCCTCTCGGGATGCTTGTAGCCGGGATAAAGTTACTTATTCGATGACTGTCACCTTTTAAGAACGAATCCATTAACCTCCATAAAAGACCGATCATGGATAATAACGAACTACTTAATGCCTACCACAAATGCTATATCAGCATCTGATTACCGCTGGTCATCTGAACTGGGGGACGACCGGTACCAAGTTCTGGGCCAGCCACAGGGGGCTCAACGGGACAGAAGCTAGCTTGTACAGGAGGAGTTAGACGCCACTTTCTTAATGCGAACGGTTCGTGTAGTGCGTTACACCAAACAGTGACAATTATGGGGTGTTGCGCTCGTGCAGGAAGTGAATTCCTTTGCTTAATTCTGGGACCAAGGCTCCGCAGACCTTAACTTTTTAGTCCTGTACGAGGCTCATTAGTACCGTGCTTGGTGGCTATTGAGACCGACTTAACAGATTAGTCTAGATTTTTGCCCGCCTTGCATGTGTCACTTCGCATCTCGTGTTAACGGATTGTGCCAACTCTGAGTGGCATCCAATAGTGTCATAAGGAGGCGTACGCGGTGATGGTTCGCTTTAGCAGCGCATAACTCCTGATTTCGTCCCCTAACCATCCGCGAACGCCGCCAGTGTCCTTATTCACAACAGGATTATCCCGCTTTGAACCGATCGGTCAGGTTATGGCGGCCTGTCATCTGCATATGTGTGTGAAAGGACCGCGGCAACTAAGGCCGTATTTGTGGATTAATGACATCCAGTGCTGCAGTATCCCGCACACCTACAATCTTCCTGACTTGAGCCGTCACCGGCAAAACCCACTATTGAACTAGCAACGCGTTCCTTGGGCCAGATTAGTTTATGGCGCCTACTCCTCAGCGCCCCTTTGAGCCCATAAATGCGTTCCTCGGTTTTCCGTATGGACATAGTGCTAACTCGAGGATAGTTAGTCAGGATGAAACTTAGAAAAGGTGTCCCCAATGCTTGTAAGCAGCGGGCTGTGACTTGTTACTGTCATTATACAAGCAGGAGGTTCGTTGTTCATGCTAGAGAGAGACCCCTTAGAGCACGCGTCGAGGTCCGTCTATATCTTTACCGCTTGGTCCCCGAAACAGGGGTACATGTTTTAAGCAGCTTCGACGAACCATTCTACCACAACACCAGCTCAATAAACTGTCACGCATCCTTAAGAGGGACGTCGACAGCCGTAGTCCCGCACTGACCAATTCTCCGTTCCCACCTAAAGTCATGAAGCTCGTTCTAACCAGCGTTTTGCTTGGACGATGCT"
# print(reverseComplement(text_rc))


###############################
######## PATTERN MATCHING #####

#finds all the occurrences of a pattern in a text and returns the start indices of those occurrences
def findOccurrences(pattern, text):
    patternLength = len(pattern)
    positions = []
    for i in range(len(text) - patternLength +1):
        if pattern == text[i: i + patternLength]:
            positions.append(i)
    return positions

# pattern_pm = "TGTTCATTG"
# text_pm = "TATGTTCATATGTGTTCATGTTCTTACACTAATGCAGTGTTCATTGTTCATGCCTTGTTCATTGTTCATTGTTCATGTTGTTCATCTGTTCATCACTGTTCATTCTTGTTCATATCTTTGGTGTTCATACTGGCCGTGTTCATGCAGCTCCGCTGTGTTCATATGTTCATGCAGTGTTCATTGTTCATATGTTCATATGTTCATTTGTTCATGGGACGATTTGTTCATTAGATTGTGTGTTCATTGTTCATAATGTTCATAATGTTCATCCGATGTTCATATGTTCATCTGTTCATCGTGTTCATACTGAAAAACTTGTTCATACAGTGTTCATTCTGTTCATCAAACAAGATGGTTTGTTCATTGTTCATACGAGGCTGTTCATCTCTGTTCATTTGTTCATTAGGTGTTCATTGCTGTTCATATGTTCATTGTTCATGTGTTCATAAGTGTTCATCGTTTCGTTTACGGGATCTGTTCATTTGTGTTCATATTGTTCATGATTTCTGGTTGAATGTTCATTGTTCATCTCGTGTACCTGTTCATATGTTCATCCGTGTTCATGTGTTCATTGTTCATGCCTGTTCATCGTGTTCATGTGTGTTCATTATAATGTTCATATGAATGTTCATAAATGACTTGTTCATCGTGTTCATCTGTGTTCATTTCGCTGTTCATACTGTTCATAAGCGTAATGTTCATTCTGTTCATTGTTCATTGTTCATGCTACCTTGTTCATATCACGTGTTCATCCGTGTTCATTGTTCATTCTCATTGTTCATTTTATGTGTTCATTGTTCATGCTTGATGTTCATTTGTTCATTCTGTTCATGTGTTCATTGTTCATTTACGTGTTCATTTGTTCATCGCCTGTTCATTGTTCATAGATGTTCATTTGTTCATCCGTGTTCATTACGGTGTTCATAGGACTGTTCATCTATGTTCATATGTTCATTGTTCATGTGTTCATTAAGGTGTTCATGACCTTGTTCATCCTTGTTCATCTTACTGTTCATCAAGTGTTCATATGTTCATTAACTGATGTTCATTGCTGTTCATCGTTGTTCATTGTTCATTCTGTTCATGGTGTTCATACCATGTTCATCGGCGGTTGTTCATGTCTGTTCATGATTCTGTTCATTTGTTCATTGTTCATGCTGTTCATAGTGTTCATTGTTCATTTGTTCATATTGTTCATGATTTGTTGTTCATGATTGTTCATTTACAATGTTCATTGTTCATAGTGTTCATTTGTTCATATGTTCATATGTTCATTCTTGTTCATTGTTCATTAGCCATTGTTCATTGTTCATTGTTCATATGATGTTCATTGTTCATTGTTCATTTTGTTCATTGTTCATTTGTTCATACCTGTTCATGACCTGTCCTTTGTTCATCCTGTTCATGTAGGTGTTCATGGGTGTTCATCTTGTTCATAATGTTCATTCAGTGTTCATAGCTATTGTTCATATTTGTTCATTTTGTTCATACTGTTCATTTGTTCATTGTTCATATGTTCATTGTTCATGGTCGCTTCCGGTTTAAGATGTTCATGTACAATTGTTCATACATGTTCATTTGTTCATTGTTCATTTGTTCATTAAGTGTGTTCATCTGTTCATTGTTCATACTATGTTCATTGTTCATTGTTCATCTACGATGTTCATTTTATGTTCATGATGTTCATTGTTCATGCTCCATCGTTTTGTTCATCTGTTCATGTGTTCATCGGCTGTTCATCTGTTCATAAAGCTTGTTCATTTGTTCATTGTTCATTTTATTTGTTCATGCTGTTCATAGTGTTCATTGTTCATCCCTGTTCATCCAATGTGTTCATGTGTTCATGCCGATGTGGTGTTCATGTGTTCATCAGTGGATGTTCATTCCTGTTCATCTGTTCATCCCGGTGTTCATACTGTTCATGAGTGTTCATGCACAACGTAAGCCTATGTTCATATTGTTCATTGCACGTACTCTGTTCATTTGTTCATATGTGTTCATATTGTTCATTGTTCATGTCGTTGTTCATCTGTTCATAACAGTGTTCATTGTTCATTGTTCATTGTTCATAGCTGTTCATTGTTCATATTGTTCATGATGTTCATTGTTCATATGTTCATCGTGTTCATCTGTTCATCACGTTAGGGTGTGTTCATTGTTCATGCCTGTTCATTGTTCATTATTGTGTTCATCAATGTATGTTCATTGTTCATCCATTCTGTTCATGGTGTTCATTGTTCATCCTTTAGATGTATGTTCATCACTGTTCATCATGTTCATGTGTTCATTTTGTTCATCTGTTGTTCATATGTTCATGCCTGTTCATATGTTCATCTGTTCATTGTTCATGCACCTGGTGTTCATTGTTCATTACTCCTGTTCATGCTGTTCATTCTGTTCATAGTGTGTTCATTGTTCATCTGTTCATCTGCTGTTCATATGTTCATTTGTTCATAACTGTTCATTTGTTCATCAGACTGTTCATAGTGTTCATCTGTTCATTGTTCATACTTGTTCATGTTGTTCATCACAGGTGTTCATTGTTCATTGTTCATCACGATAATGCTTATATTGATGTTCATACCTATTATGTTCATTGATGTTCATCCATGTGTTCATCAAGGGTTCTGTTCATTGTCATGTTCATAGCCAGTGTTTGTTCATTATGTTCATGGTGTTCATAAACGGAGTGTTCATGTAACATGTTCATTGTTCATTATGTGTTCATTGTTCATCCCCATTGTTCATCGTGTTCATGTTCCCCTATGTTCATTAGTGGTAGTCTGTTCATTTGTTCATCTGTTCATTGTTCATATGTTCATTGTTCATCTAGTGTTCATTGTTCATAATGTTCATACTGCCTGTTCATAAATGTTCATAAGACATAGCTGTTCATTGTTCATTGTTCATATCCTGTTCATGTGTTCATTCATTGTTCATATGCAATGTTCATGGATGTTCATCAAGTGTTCATATGTTCATAAATGTTCATGTGTTCATTTCTGTTCATTGTTCATTCAATACGCAGGTATGTGTTCATAATGTTCATATGTTCATACGATTGTTCATACCTGTTCATAGTGTTCATTGTCCTGTTCATACTATGTTCATTTTGTTCATTGTTCATGAAGTGCATTACTGATGTTCATTGTTCATGCTGTGTTCATTGTTCATGTTGTTCATTCTGTTCATGAGCTGAACTGTTCATGTGTTCATCCCTGTTCATGCTATGTTCATTGGGATGTTCATATGTTCATATTGTCAGCGATGTTCATCGTCATGTTCATATGTTCATATGTTCATCACGATGTTCATAGTGTTCATTGTTCATTGTTCATCGTGCTGTTCATACGTGTTCATTGTTCATGCCTGTTCATTGTTCATTGTTCATCTGTTCATGTTGTTCATTTGCCGTGTTCATATGTTCATGTTAGTTGTTCATGGTGTTCATTGTTCATTGTTCATTGTTCATTGTTCATTCCGTACACTGTTCATATGTTCATTGTTCATAGTCTTTGTTCATGCACGATGTTCATTGTTCATTGTTCATATGTTCATGAATGTTCATCCTGCGTAGATATGTTCATATGTTCATGTGTTCATTGTTCATTACTTGTTCATAATGTTCATTGGTTGTTCATCCAGTGTTCATCTGTTCATCTAATGTTCATTGTTCATTGTTCATAGTGTTCATGGCGTGTTCATTGTTCATGGATCGTGTTCATCGTGTTCATTTAGTTTTGTACATAGTGCTGTTCATTGTTCATGGGATTGTGTTCATATATGTTCATTGTTCATTGTTCATTGTTCATAATGTTCATTATCCTCTTGTTCATTGGAACCATGTTCATAGCACAGTGTTCATATGTTCATTTGTTCATCCCTGTTCATACGTCACTGTTCATTGAATGTTCATGGCTGTTCATGATATGTTCATGCCGATGTTCATGGGAACTGTTCATTATGTTCATCTGTAGCGTGCGAGTTGTTCATGTGCAAATGTTCATCACGATGGCCGGAGGTGTTCATCTGTGTTCATTGTTCATTGTTCATTGTTCATGATGTTCATATGTTCATCTATGTTCATCGGTCTGTTCATGGGTGTTCATGAAATTGTTCATGATGTTCATTGTTCATTGCTCTGTTCATTTGTTCATCTGTTCATGCTGTTGTTCATTCAGGCATGGTTGTTCATGATCCCCGTGTTCATGTGTTCATGTGTTCATCTTGTGTTCATTGTTCATGTGTTCATTGTTCATATGGTATACGCAAATGTTCATTGTTCATTCATGTTCATGTGTTCATCAAGCTCTGTTCATAGCTGTTCATGGTGTTCATAAGTGTTCATAGGTGTTCATCATGTTCATTGTTCATGTTAGTGTTCATGTCTGTTCATACCTGTTCATGTTGTTCATTGTTCATCCTGTTCATGTTGTTCATCTTGTTCATCGTTGTTCATCTTGTTCATACTGTTCATTGTTCATATTGTTCATATAGTCGTTTGTTCATCATGTTCATGGTTGTTCATTGTTCATGCATGTTGTTCATACAAGACCTAAACTGTTCATTTTGTTCATGTGTTCATCTTTGTTCATGTGTTCATCGGTGTTCATGTTGTTCATTGAGGTGTTCATACACGGTGTTCATATCTGTTCATTGTTCATATGTTCATTGTTCATTCGTGTTCATGTGTTCATAAAATGTTCATTTATGTTCATATGTTCATTTGTGTTCATGGTATTGTTCATATGTTCATGTGTTCATTGCGTGTTCATTGGTTTGTTCATTGGAGAAATGTTCATCTGTTCATATGTTCATTGTTCATTGTTCATTCGTGTTCATCCTTGTTCATCTTGTTCATGTTGTAGGATGTTCATTGTTCATTGTTCATAACTGTTCATAAATTGTTCATTGCTGTTCATGTTTGTTCATTGTTCATTTGTTCATGTGTTCATCATGTTCATAAGAGTGTTATATGTTCATTGTTCATTCTGTTCATTGTTCATGTTGTTCATGCTGTTCATCTGTTCATTGTTCATTGTGTTCATGTGTTCATAGTCTGTTCATCTGATGTTCATGATCAGCTTTGTTCATCATGCTAGTGTTCATTGTTCATAATGTTCATTATGTTGTTCATGCTGTTCATTGTTCATTGTTCATCATTATGTTCATAATGTTCATCATGTTCATATGTTCATACGTGTTCATGGTTGTTCATTTGTTCATAACTGTTCATTGTTCATGTGTTCATGATGTTCATTGTCGTGTCCCTGGTTGTTCATTGTTCATCGTTAATATGTTGTTCATATGTCGAGAGATGTTCATGCGGCGCTGTTCATTTGTTCATTGTTCATTCCTATGTTCATTGTTCATATGTTCATCTGTTCATATGTTCATGTGTTCATCACCTGTTCATTGTTCATTGTTCATTGTTCATATGAATGTTTGTTCATAGTATGTTCATAGGTGAATGATGTTCATATTGTTCATCTGTTCATTGTTCATGTGTTCATGGTGTTCATTGTTCATAGTGTTCATCGTGTTCATGGTGTTCATTTGTTCATAGTCCGTGTTCATTGTTCATCCTGTTCATGATGTTCATTATTTTATATGTTCATTTGTTCATTTAGTGTTCATTGTTCATAGTTGTTCATTGTTCATTGCGCTTGTTCATCACGTGTTCATGCTGTTCATAGGGCCTTTTATACTCGCTGTTCATGTCCCACTGTTCATGCCTGTTCATGCGTTGTTCATCGAGTGTTCATGAAGTGTTCATTGTTCATGTTGTTCATTATGTTCATTGTTCATGTTGTTCATATGTTCATGCAACTGTTCATGCACGTGTTCATTGTTCATCTGTTCATCTGTTCATTGTTCATGTGTTCATTGTTCATGTTGTTCATTTGTTCATTTGTTCATTTGTTCATATGTTCATCAGGGCCATGTTCATATGTTCATGTGTTCATGCCCTGTTCATTGTTCATGTGTTCATTGTTCATCTTGTTCATTGTTCATTGTTCATTCTGGTGTTCATGATGTTCATTAGTGTTCATTGTTCATGTGCAGGAATTGTTCATGTACCTGTTCATTCTGTTCATTATGTTCATGAGTCTCGTCTGGCCTCAAAACTTGTTCATATGTTCATTAAGTGTTCATATGTTCATTTATGTTCATTCGTTTGTTCATTGTTCATCGTGTTCATGGTATTGTTCATGGTTGTTCATTGTTCATATTGTTCATTTGTTCATCTCACCCACGCTGTTCATGCCTGTTCATGCATGTTCATATGTTCATCATGTCTGTTCATATGTTCATTGTGTTCATTGTTCATACTGTTCATTTGTTCATCTTGTTCATGCCCATTACGGGTGTTCATGCTCGTGTTCATTACTATGTTCATATGCGTGTTCATTGTTCATTGTTCATGGGATGTTCATTACTGTTCATTGTTCATTGTTCATAGCGAGTGTTCATGGGATGTTCATCTTGTTCATTGTTCATCACTGTTCATTTGTTCATGCCTGTTCATTCCTGTTCATGTGTTCATTGTTCATTCCTACAAAATCATACGCGATGATGTTCATGGTGTTCATAGTGTTCATACTGTTCATTCTTGTTCATCTGTTCATTGTTCATTGTTCATAGTGTTCATTGTTCATGAATGTTCATTGTTCATCTATGCTGTTTGTTCATCTAACCTGTTCATTGTTCATTTGTTCATCGTGGCGTGTTCATTAGCGCGGTGTTCATCCATGCGGTGTTCATTGTTCATATGTTCATAGCTTCCCTATGTTCATTGTTCATCTTAATATGTTGTTCATAATGAACTTGACCAGAGTATGTTCATAGTTTCCAGAATGTTCATTCCCGTGTTCATTGTTCATTTTCTGATGTTCATTGTTCATTGTTCATTGTTCATAGGTGTTCATTCTGTTCATTGTTCATGCCCATGTTCATCTCCGATTGTTCATTGTTCATTGTTCATAGTGTTCATTGTTCATCTGTTCATGTGTTCATGAGATGCTGTTCATTCAGACTCGTGTTCATACACATACGATGTTCATTGTTCATACAATGTTCATCTGTTCATTCGCTGTTCATTCTGTTCATAAGTCCTAAGCATGTTCATATAATGTTCATCCTGTTCATCCCCCGTGTTCATTTGTTGTTCATCCGCATAGCGCCGGGTATGTTCATTGTTCATGGCATTTGTTCATGTGTTCATCTTCTGTTCATCGTGTTCATTGTTCATGTCTGTGTTCATGTGTTCATATCTGTGTTCATTGTTCATTCAGCCTGTTCATACTGTTCATACAGATGGAATGTTCATGTGTTCATATTTGATTGCTCGGGGATGTTCATTTGACCTGTTCATTTGTTCATACGTGTTCATCATAGTATTTCTGTTCATTGTTCATTGTTCATGTGTTCATTCTTTACGCTGTTCATTCGGTACTGATATGTTCATGTTCGCACTAACCCTGTTCATAACGTGTTCATTGTTCATCTTATGTTCATGGCCGGGTCCGGCATTGTTCATCGGCATGTTCATATGTTCATCGATTGCGGGTGTGTTCATAAGGATGTTCATTTCCAAAGAATGTTCATCTCTGTTCATGTGTTCATTGTTCATTGCTGTTCATGAGTTGTTCATATTGTTCATTGTTCATCGGCATGTATGTTCATATGTTCATTGTTCATAATGTTCATTGTTCATGATGTTCATCAGGGAAATGTTCATCTGTTCATTGTTCATAACTGTTCATTGTTCATTGTTCATTGTTCATTGTTCATAGTTGTTCATAAGCGCTGTTCATCATGTTCATTGTTCATCGGGTGTTCATATCGACTCACTTGTTCATTGTTCATATGTTCATACTGTTCATGCTGTTCATATATGTTCATAATTGTTCATGGGTGTTCATTGTTCATCATGTTCATATGTTCATTGTTCATATGTTCATCTGTTCATTGTTCATCGGGCCGAGGTGAATGTTCATTGTTCATTCATTGTTCATAACCAGCGTTGTTCATTTGTTCATGTGTTCATTGTTCATATTGTTCATTGTTCATTGTTCATGCCAATGTTCATATGATTTTTGTTCATGTGTTCATTGTTCATTGTTCATTTACACTGTTCATCCCCCTGTTCATCTGTTCATTAAGGCCACTTCATGTTCATGATGTTCATTGTTCATCTTCAGCTGATGTTCATTGTTCATCCATTTGTTCATGATCATGTTCATATTGTTCATAGTGATGCTGTTCATACAACTGTTCATGGAGTGTTCATTGCTGTTCATGTGTTCATCACTGTTCATCGTGTTTGTTCATATGTTCATTGTTCATGGTTTGTGTTCATTGTTCATATGTTCATTGTTCATCCCCAGCATGTTCATAATGTTCATCCCTGTTCATTGTTCATTGTTCATTCACAAATTCTGTTCATAGATGTTCATTGTTCATAGTGTTCATTGTTCATTGTTCATAGGATGTTCATCATGTTCATAATCATGTTCATTGTTCATTACATTGTTCATTGTTCATCCGTTCAGCCATTGTTCATTGTTGTTCATTGTTCATCTGTTCATTTTGTTTCTGTTCATCTCCCTGTTCATACTGCTGTTCATTATGTTCATGTTCGTGTATTTGTTCATTGTTCATTGTTCATTTCTGTTCATCCAGGTGTTCATGTGTTCATTGTTCATGTGTTCATCTGTTCATATGTTCATATGTTCATCTCTGTTCATTGTTCATTGTTCATGGCTGTTCATTGTTCATACTTGTTCATTTGTTGTTCATTGTTCATGGCATCATGTTCATGTGTTCATTGTGTTCATCCTGTTCATCTGTTCATACAGAATTGTTCAT"
# spacedPrint(findOccurrences(pattern_pm,text_pm))
# print("-------------\n")
# spacedPrint(kmp(text_pm,pattern_pm))

### EXERCISE BREAK
# file = open("../data/Vibrio_cholerae.txt",'r')
# text_vc = file.read()
# pattern_vc = "CTTGATCAT"
# spacedPrint(findOccurrences(pattern_vc,text_vc))


################################################
############## CLUMP FINDING PROBLEM ###########

#finds all distinct k-mers forming (L,t)-clumps in genome. 
#A k-mer forms a (L,t)-clump if it appears at least t times in an interval of lenght L.   
def findClumps(genome, k, l, t):
    patterns = []
    for i in range(len(genome) - l + 1):
        window = genome[i:i+l]
        freqTable = frequencyTable(window,k)

        for pattern, frequency in freqTable.items():
            if frequency >= t and not (pattern in patterns):
                patterns.append(pattern)
    return patterns

# genome = "ATTTTTACCTTGCATAGGGAGATAAGAAAAGGCAAGAATAAAGGGGCACGATGCACGATATATGATCGATATCACGCTGTTTATCCTCGCCTAACTAAACCCCTCAGGCGCGGTGTTTGTTCACATTTGACGTGTGTCAGACCCTCACAAATGTACTTGGCTTATGGCTTATGGCTTATTGGCTTATTGGGACCAGTTTAGACACGCCTTCGCACTCCCAGTAACTACTGGTAGCGAAGGCAACCGCCCCGAACTGCGTCCTCCATAGTAGTATAGCGGAACCCATAACTGTCGTACCTACACAACGGTGCCAAGGGATCACCGTAGCCTGCCGAACCGGGTATATATGGGTCATGTATGTGAGCTACCCATTTGAACTCTTCTTTGGGTAACCGTGGCCGTCTTAGTTGGGCTGACTTTTCATATGACTCATAGTGATTGCACGTTTAGCGTGTTGGGGATAGATCCGGTAATGACCTCCAATGCTTAGTTGATCTCGCACATTTGGTTGCCTATGTAATGTGTTTCCCGACCGAACCGTGGCAATAACTTAGGGTCAAATGGAGACGACATTCCACGATCATGGTCATGCGCAGAGGTCGATAACGAACTGGACGAGGGTAGCGCAACCCACGTCCTCGCAATGGCAAGTACGATGCCGCGAAAACATGGGGCCAATCATGCATCTCGTCGATGGGCAGCGGCAGAGGGGGTCCTCTTTCTTAGGTTGTTCGGTCGGGGACTATGGTGCCTAGGACATCACATAAAAGTAAAGTAGCTGTTCCTGTCCCCCCGCGGTGCGGTCCCCCCGCGGTTTATGAATTTTTCAACCCCGAGTTGTACGTCCGTTAAGGAGCTGGCATCTTAGTGGGTTCAGAAACCGCCGTGTTTTTTCCGTGTTTGTTTCGCCTCGGTCGGTCCCGCGTGCACTGTGCGAGTGGATTTGCCATACAGAATTTTAGGTAGTCTCTATCATTATCTATCATCGTCGCGTGAATGGAAGCCCATGTTCCGTGGAATCGAGTTAGTTGGGATCGTGAGTAGCTGCTATCCCGAAAGACTATCTCTCACCGCCGCGTGAAGTTGCGAAGGCGCCCATGTCAGTAGCCGCAAAGAGAAACTAACAGTGTTTCCCCTTCTATGCGTACGTCCGAATCGGGCGGGATATGTGAACTCTAACACGATATTACCAGGGAGAGGCGATATCCTTATTCACTCGCGGGAGAAACACGTTACCGAGACCCCTAACCTGCGGAGTGCCTCCCTGGGCAGCCGAAATGGAGTCGTAAACCCGAACGTATTTGGGCATACTCGGTACCTTCGAAACGACGGGACGGAAACGACGGAAAAACTGGGGTTTCGAACCATCCGTCAACGATTCGGTCACACATCTCTAGGGCGCGGGAAGACATCATTTATGAGTATCGTAAGAAGCTAGAAGCTAGTAAAGCTAGTGTACAATTGGCTGTTGGTATTTTTCGCGCCCGTTGATACATGCGTCTTCCAGTGACGTGGTGAACCATTGTCTCGCAACTTCATGAGAAACCAGGTTTAAACGGGGATGCGTTTAATGCAATCCATGCTTTTTCTCGATGGGCACTCATAGGTGCGATCTTACTGAACATCTCGATTCCATTCCATGGATGTTCCATGGACGATTTTAGGGATGATGGGCCGCCGCCTCCGACCGACGCTCTGAGCTCGCTAATTGGTTCCCATCGATCGTTAGACACTCAATCTCATCTAAGCCTGAATGCTCCTATGTCAGATGGATGTATGTTTTTCGTCGTTCGATCGTTCGATCGTTCGATCGTTCGATCGTTCGATCGTTCGATCGTTCGATCGTTCGACGGACTCCCGGACTCCCGGACTCCCGGACTCCCGCGGACTCCGACCGGACTCC"
# spacedPrint(findClumps(genome, 8, 25, 4))


# ### EXERCISE BREAK
# file = open("../data/E_coli.txt", 'r')
# text_ec = file.read()
# print(len(findClumps(text_ec,9,500,3)))


################################################
############## SKEW ############3

#gets all the values needed for the Skew diagram. This consists on the difference of 'G' and 'C' at a given point i of the string 
def skewDiagram(string):
    diffs = [0]*(len(string)+1)
    for i in range(1,len(string)+1):
        if string[i-1] == 'G':
            diffs[i] = diffs[i-1] + 1
        elif string[i-1] == 'C':
            diffs[i] = diffs[i-1] - 1
        else:
            diffs[i] = diffs[i-1]
    return diffs

# spacedPrint(skewDiagram("GAGCCACCGCGATA"))


def minimumSkew(string):
    skew = skewDiagram(string)
    minSkew = float('inf')
    minimums = []
    for i in skew:
        if i<minSkew:
            minSkew=i
    for i in range(len(skew)):
        if skew[i] == minSkew:
            minimums.append(i)
    return minimums


# file_sk = open("../data/dataset_369238_6.txt", "r")
# text_sk = file_sk.read()
# spacedPrint(minimumSkew(text_sk))


##########################################
########## HAMMING DISTANCE ###########

#computes Hamming distance of two strings. String must have the same length
def hammingDistance(string1, string2):
    if (len(string1) != len(string2)):
        return -1
    hamm = 0
    for i in range(len(string1)):
        if string1[i] != string2[i]:
            hamm += 1
    return hamm

# print(hammingDistance("AACCCTTTCCATCTAGACTGGTCACTTGATACCAACGGCCCTCGTCTACGTTCCAGGCAGTACGCCTGTACGGGCCACCTAGACTTTGAGCTAAAGGCCGAATGCAGCCGCGTACATGTTAAGAAGTCTGATCTCGTCGGAAACCTTAACGGGATTTGTCAGCATGCCGTGCGTAGTGGAGACTCGACAAAGTGCCCATTTTGTTCCTGTCACCCCAGGTGTGTGGGTCCGGCGAGTAGTGGTATTCTGACTACGAAAATCGATGCACCGATCCGCTGAGGTTGAGGGAGACAGTTCGATTTGGCTCTGTAGGCTTGGGACTGATTGGGGCGACGAGCACTGTGAACTTCTGGAGGGGGTGAAAGAGGAGGACCTGAACGGTGAAATGCGTGGAGGGCAAATTGATAGGACCGTGATTTCCGCACGGGTAAAACTATTGGTGTGAACCGAGCAAAATGATCCCCGATCTCCTGGCGTATTGAAGCCTGAAAACATAGGGTCAGTTCCAACGAAGAAGGCGACAACGTGCAATTAAACACGTGTAAGTTTTAGGGACTGGTTACCCGGTAATCTTCTCAACGTCACACGACAGGTCGCGCGTAGAAGAGGCTCGCTTGTTCATTCGATAACTTGTCCTACAAAGTCAGACGTGGTGAGGTCCGGGATTGAACCACGAAGTGAGGGTGAGGTTGATAACTAGCTCCATTGGCTCGGTCGGCTACGTTCGTGTTTACTCTCGTGCCAAAATGAATCTTAGACATCCCGCCTCTGGAAGCGTGGCGATAGTAAGTGAAGATCCGTAGAGGTATAGCCCCACGGGTCTCCTCCCAGTTGTTATCGGGGGACAAAGCATTTAAATACCCTGGGGAAATCGGGGAAGTGACGGCCATTTGCTTATGGCGACCCAACCTCCCCTAACCGCGCTCTCAGACACGTAGGACCTGCCAGCTGATGCTCGGTCGCACTTGACCGACCATATAACGACTATTTTTTTACTTATACATAAGTTTACGGTCTAGCATAGGTCCAACAACGTGAAAGACATTTAGATTCCACCAAAAGGGACCG", "GTACAGCTGAACCTGTCTCCTAAATCCCGTCAGGAATCGGTTACCTCTTCTCATCCCTTATCAATGTTCATCTTTCACACTTTCGATCAGGCAGCGATACGTAAGACACACGACTACTTAATCTCCGGACAGCAACCCCTCGCAGGGTTCCACGGGGGGGGGGTCGTCCTGATGACTTCCCTGCGGCCACGAGCGTCCGTTGTGGCAAGAGCCTATGCAATCTCGCATGCAAAATCACACATCCTGGGGGGGCCGGGAAAGTAAAACCCTACTCTTACCGTCCCAAGGCGGGATCTTTGCCTCTGCCTGGCGGAGCGGGCGGCACTCGACCGGACCGGCCTGATCTGCCTATGAAGTGCACCACGAAGGAAGAATAGCAAAGAGAAATGGCGTTGGATTGGTTGATGTGGATTAACTTTTCATGATCTGCACCACCGTGGGTGCGCCTAGCGCCATAAGCCGTTAGTAAGTCCGTGAAAGAATCACCCATTGTCTAAGTGCTGCCCCGCGGGGTCGCGTGCATGCGTATTGATACCAGGTTCAGTAACCCCTGACAGTGACGTAGAATAACGTAAGTCTTACGCGGCCAGAGGTTGTGGGCATGCATAGCGACCTCCCCTTCACCGGGGCACAGTTGTAATTAGCATCGCCCAAGACCCCAGGAGGACCTACAGAGAGGTCGCACGTCGTACGAAAGCTTTGCTTGCGCTGGTTCGCGAAACGTGTCATGACATCGTGCCTTCTGTCAGGCCTCGTTGTCGCTTATTACCTCTATCGTTAAATCATTCCAGGGCAGAAGACCCAGTAGCCCAGCCCCTACAACCTCTAAGGCCCCATGATTTGAAGCGTCGTGTTTTATCCCGATCAAATAGAGTTGTAGTTTTGCGAATATACGAGTCCTTATCTCGGGTCTAAGTATTCAAGACTAAGCACGACTCGAGAAGCCTAAGTCAATGCGTCCGACCTTAGGGAACGTCGTGAAATACGGGTCGTCGTTCTCTTTCTCACCTGTATAATCCGAATTTACGGGGCCTCGCCTGAGGAAACTGTTGTGTAATGACGTAACAA"))

#finds the approximate occurences of a pattern in a text with hamming distance less or equal than an integer d
def approxPatternOccurrences(d,pattern, text):
    patternLength = len(pattern)
    positions = []
    for i in range(len(text) - patternLength +1):
        if hammingDistance(pattern, text[i:i+patternLength]) <= d:
            positions.append(i)
    return positions
#spacedPrint(approxPatternOccurrences(6, "TAGACACTT", "CAGCATACGTTACAGATCCCCGACACAGAGACCCAAACTCTTTTAGCCAGGTGCGCTAGTCCCTAAAGCCCGTTGAATCCGAGTTTGTTAAACATGTCTCACTCGCTGATATAGTACGAACACTCTCTCGCGATAAACCTTTGAATTTATCCTGTCATTCCAACGGGAGGGCTATATTGCCTCTCAAACCATCTCTAGATTATCCCTTCTCGGCGACACAATGGCTCTGGAGCTGGAGTCGAATTAAGCGCCTACAAGTATTGCGAACATAGACGCATTGCGCCAAATCGGATCTTCCCCTTCAGAATCGCGGTACTACCCTCCAGCAATCACACCCGATAGACATGGGCTGGCTAGCCACGTTTCTCCTAAAGACTAGTGTATAGAACGCTCTTCATTTTCCTTCGTAAAGAAATTGCTGATGTCTTAAAAGACCTTACCGACACGGGGGTGGTGCGGTGCCCACAGTAGGTACGGCAGTGACCTCTCCAGGAGTGAGCTGCGGCATTTGACTCATCCTATCGTATGTCATAAGACCTGCTAATAACGGGGATGGAAATCCACCTCCCGGCACCCAAGTTGCAGGTCAGGTATCGACAAACTACGGCGATGAGTCAGAAGACTGACTTAATAACCTCCGGATCAATAACTTGTGCTCCTGCGCATGGTGGGCACTTTTCAACAAAGTCTCATAGGCTAAGGGGCACGTAGGACCGGACCTGTATAGCATGGGGTTAACACTGACAAGAGGGACAAGCGGTGCCTGGACATTAGGATAGCTCTAGCTCCCGACAGAACACATATGATTAGCCGAACCGCGGTTTAATGTCATGAACTATCATTACTCAGGGATACATGGCCGTCCTCCACGTTGCGAGCCGCTCCTTAAGTTACGGCAATGCCCATAGCTAGTTTAGTAGTCTGGACATTACTGCTACCCCTGGAATCAATGGGAGGCATGAGGTATCGGTTTGGTTCCCCGTTTAGTCTTACGGCACGGCTCTTGCCTACGCATGGCTATGAACAAGCATGCACTCACAGAGTATCTCAGGGATGTTATTCGACCTTCATGGGGCACAGCAACCTGGCATAACATGCGCTCACCGGTAGCAGTTACCCTACGCATTAACCCACCAATACGTGGCATGTAAATTTGTTAGCGACGTGATACCAACCGATTTGATGGTCTCTGTTGTGGGTATGAACTGGTAGTGCCCCTTATACCGGCACAGACGCTCTCATAGGAACCTACCGTACTTAGACTTTCCACGGAGACGACGCATCCATGCATGTGGGGTTCCTAGCAATGCGTAATTCCGGGCCGGACGCGGATGCGCTGTGCCACCCCAGAGATTGCGTTGGCATTGATTTGCCTTCGAATGGCCTATTCGACAATTGGGTACAAGTGTCACAGTGAACCCCGCAGTGAGGAAAGTGCTGGGATCGTGCTGAAGTATAGGGTGGGATTAATGCAACGAGTCCTGGAGTCCGAAGTCGCATCGTGTAATGATTGCCTCCGGTTGCAGCTGCGAGTCATCCCCGGTTCTCCCGCGGTCAGACGTTTTCGGAGCTCCTCGGGGGGTATTGCAAGACGGTAGGGTTACGAGTAAAATGACTATCATAGACTGACGTGAGAGGGAGCGGAGGTGTCTGTGTCCAGGCGGACCCAATTACACCAGAATGCTAATTTGATGTGGACAGATACTGGCACGCAACAGTCCTCCACATGTATGGAGATGCCAAACCAATACCCTCACTAGGGGTTTCACATCACTCAGGCTTCCTCGTTTGTACCGCGCATACTCACTCGCGCTCTCTACCGTCAATCTCCAGCCGTAGCCGGCTGTGGACCTCAGTAGGCCGGTTAACGCAGTTAGACTAAACCGCCATGCAGCTACGGCTCCTAAGCCTGAAGTGTGTTGCTCTCTTCATATCTGCGGATCGCTTCCGTTCGGAAGCACACCAGGGCTGATGTCTCCTCTACGAAGAAACCATTCGCATACGCGGATTTTCTCGGGAGCTGGTCAGTGTGTTGCAACCAATTTACATCAGAAGGGACCGGACCTTTAAGGAGTATATCGAGGTATGTTCATCGGCACTCAACAACATAGCTGGTATCGGTGTGACACTGTTGGCTTTGCCCAACCCTTAAGCCGAAACGAGCTCCGTGCCGTAAAGCTAAAAAGTGTAAGGGAACCGGAGTTCCCGTTAAGGGCGTGCGGTCGCGATCCAATTCTCTCAATGGGGACGACCAGCATGCGGATTCTGGTTTTGCGGAGCGAAGCGAACCATAGCGAAGGATGTTGCACTTACCACACAGCGCTCACGAGGCCTGAACATAAGCCTTTGCCTGGGTATCCACTGCTACAGATGACAGACTTTAATGCTCTAAGTCGCTCTGGGCGCATGCGCAAAATTCTGGACTCGCCCTCGACGCATGTGAGTGCCTAGTTCACACGTTTGCTTTTCACAGTATTTTCTCTCATACGTAGATTTGGGATACTTCCAGAGCACCGGCGAATGCAAGACAGCGCCCGACACGTGACGAGTTGTCCGATTTCCACGACACACAAAGTTGAAGCAGCAGAGCCCACAACCCGGCTCAGTATACGGATCTAGCGGCCCGAACGAGCCTTGACAGCAAATAAACGATAGCTCTCTATTAGGAACTAAATTTGATGTTGTGGACAAGAATCAATCTACTTCACTTTGCCACCTCTTCCGCAGGCCATTGATTGATTGCGCACTATAAAGAGCCGTAGGATCAGAACAGCGCACTACCGTTGGGGATCCGTCCTTTCGGACGTGTGCACAAGCACACCGTTAGTCCGGAGAGTTATCTCCTCAGGAGTTGGTAGTACGCGCCGCATGTGAACGGCGCCTCCTCACTCTGGAGCTATCTAAGCCGGTCCGGTTCGCGGGGATGCCGTATATTCAGAAGTTGGGGCCCCGGATGCATGTGCTCGGCGCCACTCGGGAATCTGCGAACCAGGGAGCATGTAATCCATGAAAATGCAAAAAGTATGGCATGACCATTACACTCCTTAGCTTACGCTTTCGCTCTTAATAAAGAGCGCCCTCTGGTCTTACCTAATTATGGCTTTACCATAAGCCAGAGTAAAGCTTGTATTGCGCTCGACGCGAATTGAAGTCGTATCCCGCCGTAAGGAAGATGCTGAGGTTATACCGAAGCTGATTCGGGTCACACCTCCAGCGTTGATGAGTTTTAGGGTGGAGTCCAACAACAGCGAACGAAGCGTTGCGCGCCCTATCCGCGCCTATATGGGTTGCCTTCAATACCTGGAAAACGTGGCGTGAGTATCATTCGCGAAGCACTATTATTTACATAGTTGTCTCTAATAGTGGATCATGCATCAATGTCTCACACACAGCGCACACGGATACGTATACGCGGGGACTACTCCTCAAGGATCATGCACGGATTATAATGTAGGCATCAACGTTTCGCGACTGGCCACACGCACTTCCGACCTGTGGACCCTGCTCCTAAGATACCAGGTTACTCGCAATCCCACACGCATTTAGTTAATAGCAGCACCTATATGAGAAGCCCGCCTCGGGTCTCTGTACACATTAGTCCAGCGGAAGAGCCGATGATCCAGCCGGACATCTATACTCGGTGCGAACTACCAAGCGAGTTCCTTGACAGCTCATGCCTCTCGCATACCATAAATGCGAGCCATGACCCGCAGAGGAATGTCAACCAGGATTGCCGTGTTCGCGTTACTGATCCACTTACTGTCAGAATGAAGCACTCAAATAAGCGTGGCATAGAACAAGCGTGCGCCGAGTAGGGCTGGTTGTCAGAACACACACTGCCTATAGGAGGCAAACTTCTGGGGGAATGCGCCCCTAATAGGTGGGCTTATTTCCTACGCATGTCATAAGCCGGTTCAGGTCGGCCGAACGTGCTTATATATTCCTTTCGCGCCGACCGTACTAGCTTTGTGAAATGCCAGTGCACGCCCCACTAAGATTGGATCCTTGAAACGATGCCTGTAGGTTCGCTTAGTGTCGACCCACGAAGCGGTTCCACTGAACGGGCAAGGTTTCTGCTCAGGGCGGGGGGCCTATGAAGACCCGGAACTAAAAATTACTTGATACCACTAGAGCTAGTGTTGTCCCCTGGATTTCGCTCATCCGGGGCCCCGATAAGTAGTAGCACACTCTACTATCGAGTCACCATAAGGTAGGCGCGGGACGTGCAACACCTGCCCCACAACATTTCTTTTGCCAAGCATCATATTTATATTCCGGGAGAAACTCTGTTGAGCCAGCGAAAATTAGTTTGATGTGGCCCAGCTTTACCTTTGTAACCCCGAATGTAGCCCGTATTAGCGGTGGCACAGTTCTATGTACCATAAGTTAACTCTGTAATCCTATCTAGTTAATCATGCGAGTAGTAGGACAACTAAGATCGGACGTTGTGCAACAGATTACATTGGTCGTGCGAGTTAGCACGTCAGGGACGCGTTTCAGGGTGTTCCGGAACCCGGCTTCGGCTGAAAGGAGTAGGGTTCTTGCCAACATCCCAAAAGCGGGGGATGCTTAGTAGCTCATTGCCACTAAGACACCAAACGTGCTACCATCGAACCACAGACTCTCTGGTACATACGTTACCCCCAATCCCGGCGGGTAGTTCTCACTGGTGCGTTGCATAAAGACTACGGCCACAGATCGATCTTGGCTTTTGTGTTGTAAGCTAGTGGAGGACACATAATTGCGACGCAACACAGCCACACGCACCCTGTGCAGTGAGTGCTCGCCCACACGTAGATCCGTGGCTAACGAGGTACCGTTCTGGGCAGCATTATCACTATGACAATTCAAAAGAGAATAGTACGCGGGGGCCCGGTAACGTCATTACGATACGATTCCCTAAATGTCCGAAGATTGACAAAGTATAAAAGCATAGGCTGAACAAGGGGGTGCTATCTGATAGGTGTGTAGATGTGTTTTCGACGGTCGAGGCCGAACGGTGCAGATCCTTTGGGGTGACTTGTTCTCCTTGAGTCGCTTGCTATAGACTTGTTTAGTGCGTTACCTTGGAGCCCGGGGTCTCCCACGATTCTACAACTCTCCTGCCTTGTGGCTTATCAAGTTCCTAGATGAAAATTTTGACGCCGCAGAAACTTCTCGCATTTTGTTGAGTCCGTCAACCACCGGTTTATTTTATACCGGTAGGGTATAACTCTGAGTACCAAATACGGCGGACCGTCTCAGATCTACCGGGACACGGCAGCCAGCCCTGGCATCGTTGAGCTTCAAGCGAAATTAGAAGTCTTCTGCCGTGAGGTGACCATCGATGAACTGAATAAGGAGCATGAGGGCTTTCTGACAGGCGTATACTCGAGTATAAAGTAAGCATAATCCCGCCATAATCGAGCGTGATTTCTGATACCACGGTTAAGCATTAAGAGACAGCGGGTGGATACACCCGCACAATGGTGGCAGACTGATCAGGCATTGCACGAGTAATATTGCTAAAGATCGTTGTTTGTAGTCTGGCTCAATGTGTCGGCTGCCTCTTATGGGTTAGGGTATGTCTATAGCCGTGTCTCCAACAGACTGATCGCCGTCTACTCGAAGTTCACCTGAATAAGTATGCAGATTGGTACCCATTAAAAAGCGCTACCGAATCTTTCTGTTCAGACGGGCTTCTACGTCTGCTGTTGTAAATCTACGATCCTCTAATGGATCGGGGCCGAAGCCAGTTGTGGGTGACATAATACTGCTTACTCTAATCGCTCCCACCTACCGAATGCACAGAATACACTGACTAATTCCGGCCTACAAGAAAGCTGTTACCCTGCCCCCTTCGCAACATCTGAAACCGAGACCTTACCCCGCGGATTCCATCCAGCACCTTCGAACGAGCTACTATCCATCCAGAGATACGTGTGACTGCGAGTTGCAGACCTGATGCTTGCACGCCGAGTGCCTCCTGACTCGGTAACAGTTGCGGTTTATTGCATGAACTACCGCGCCCCTAATTAGAGCCTTCGGACTTGTGATATTGTAACGTATGATCCTCAAAACCCAAAACGCGTGGACTTTTGGGTCACATCCTTCTAACATAATCTTGCCCTTGCAGCTTACACACCCGGAAGTATATGATAATTCTTTTATAAAGGAACGTTCATGGGGAGGAGGTTCGTTCATGTGTAGACAACCGTTATCACATCCTGGCCACCACTGACTGGGTCTCGCCCTATGCTAACTGGGGTTATTCGTTTCGAGTAGTATCTTGGATCTACGTGCTTCCTAAGACTCATAAGCGGTCGGTTGTGCCGTAATCGCTGCCGGAAAGTTGAAATGAGACCTACAAACTCGTCGATGGATCTTTAAGAACGTTAGAAGACCAAGAGGTCGCTAGAGAGCGTATCTTAAGGGATTCATGGGCTTGCGATAGGCCCTTTGGGCGAAGGAGAAGGGTAATGACCATTAACATTCTATATGTTATTGTTCATATTCGATCAACATCCAATTTACCGAAGACTTGATCCGAACGCAATCCCCTAATAAAGGTTGGAAACTCTGGGACGACCAGCGACTAGTTATCCGGAGGCGGGGGAGTTAGGGGGACATCTGGATCATCACTCCTTCACTGGACCTAGACTATAAGGATGTGTTGACCCCGAGTGACCTTTAACCAAGAAAGCACAAGATACATAGGCCCTTAACTTCTACGCTCAAAGGCAACCGCCTGGGTCTCCTATCGCGGCAGTATGGACAGTTACGCTACTGTCAACTCGAGGGTTCCCCTGACACGGCTTTGGTTATTGAATACCCACTTTAAGAAATGCCGTAGAAACGCTAGAATGGCGCGAAACTCACAAGAGCTTGAGTTCCCTTTCGTGAGCAACTACCCGGGTCGGCAGCAGATTTTTATCTCTGTCCCCCCATTCGCCCCGCGTCTTTTTGGTATAATCCAGGGTAGAGTTAACTTGCCATTTCATAGAAGTTGTCAGCGCTGCGCCAGATCCTAGTTGCTGCGTGCAGTTAAACATTGTTTTCCCCATGCCGAGATACCTATTACAATACGCTCCTGACAGCTATACTCCTGGCGGCGGTCCCACTCCTCAGCACAGGTTAGAGCGCTCCACAGGCATAACACACACACCGGCCTGTCTAAATTCTAGCGTGAGGTCACTTAGTTACGCTGTCTAATCTCACTGCGCATACATACTGCATTTTGAACTCGTATAAGGACGCGAAATTGGTGTTATACGGCCCGCTATATTTGACCATTGCAGAGCTGTTATCCGCCGAGCTGGCGTATCCCCGACCTGTGATGTAATGCTGCACCATCCTCCAGTCGTCGGCAACTCACGTGCAGCCGTACTAATAGGTGTCGAAACGCTTGCTCGAGCAGGCTACGGTAGGACTCTCGCAGCATGCCGATCCGACCCACCCTTGGCATCGCGTCGATCCAACCGAGAACTAAGCCTATTTATCCCCCATGGGATTGGGTTTCCATAGCCTAACGTAACGATAAAATATGGAGTAGACGCACTGTTTTTATACAGCTCATAAGAGAGTGGGGATCCGGGCTCATGGTGCAGCTAACTGAGGGGCATGATCGCTCAAATACAGGGATATACCGCTTAATGAGTGTGTTTTGGCTTGCTGGGTCACACCTAATCGCCTGCCTAGGTCAATACGAAGCCTCATCGCAAATGAGCTCGGATGGTGTGATAAAGACAGCCTTTACCGCAGGACGTATTAACGCTAATTACCGTAGCACCTGTATGCGGGTACCGCTTTCATCATACTAACTTTGTAAAAGATAACCAGAGAAGCTATAGTAGCTGTGCTCGGCGCTAAGCGTAGACCAACCACTCCAAATACATTTAAGGTACTTTCGCCATGAAAACAGTGATTTGAGCTATCATAGGACGTCGAAATTTACTATTCCCAATATAGCCAAGTTTCACTGGGAGCGGTAGCCAGCCCCCTCAGGGGACTCTGCACCCCATGTCATACCCAAGAAGACAAGAGCAATACATCGGCGTGCTAGTCCAGACCTAATATCAATCTATTGGCGAGTCAGGCTAGAACGACTCAAGAACTCAGCTCAAGAAGCTCCGAGTGACATGACCATCACGGTGTCTTGTTCGATTTGCGTGTTTAAGACCGCGGATCTCCGAATATCTTGGTCATTACCCGCCTCCGTTAATGTCGGTCATCATTCCTGACGACGCTTGCGGCGTATATAACTAAACGAAGGGGGCTATCTACGTCACCCTGCCTTGGAGCACACGTCGTCTCGTAGAGGGGTTGTTTACGTTTATGGCAGTCCCTTGGATGCTACTGGAGTGGCGAGTTGCAGTCTTGATTATGCTACTGTGTAAACTACAGAGCCTAGCGCTATTGGGCTTTAAGTCGTCTCTAGGCTGCGCGATGGCCTGTGGGACCCACAACGACCAACGCCTGCACGTATTTGTATTGGCGGGGACTTGCGGATCGTTTATCTAGTTTGGCGCCGGTTTAAACGCGGTTCGACCTTCCGTAAACTTTCTACCGAGGTCATGTCACTAAGAATGATCCAACGTTTTACACATGTAGGTCGACATATTCTTACTCAGGCATTAGCGCCATCCGTAAGGTCCGGATCCTCGTGACGTCTGATAGACTGTTTCATCCGGGCGAAAAAGCCCGAATGTTCGCTTTAAGCCCTACCCCTCCCTCCGCAATCAAAGAAAGACAACGAAGCGCAGCTATGCGGGAGAAGACTAATCGGGGGCCTTACTTGTGACTTGAGGTGACTGAATGTTTCCATGAACCGTTCACCGGAAGGTGTGTTCAGTTTAGCAAGGTCCGACGAACCTGTATAAAAGTCCATTATCGTTATGAAGGCGGGGCGGACAGTATGAGGAGCGCGTATATTTCAGTCATTTTTCGGTCTTCGGCGCTCGATTCTGTTAGTGTAGTCATGGGTTAACCCAGACAGGTGTGTGCCAGCTGCCACAAGCTGGACCTCATGCTAGTCCACACGCCCAAGACTGACTAGTGTGGTAGCGAGTTTACGGCCCGCTGATTGCATCTTGTTATACGTGAGTGAAGAACGACAAAGCCAGCTTTTTCCACGCTTAGATGGCCAACACTACGGCTGTGAACCGCTTGCGTTCCGGGGCACGTCCTTTGCTCGATCTGGAGCGAACCCGATTAAAGTACGAAACCGTAGCACCAATCCCTAGAGTGAAAGGTATTCGGTCCGGGGGATCACAAGATTCGTGATCACGTCGGGGTAACCGGTTTCATCTTTCCGGCTCGAAAACCAACATTGCTCATACGACCTTCTTTACGCATAAAACTGTCAACCACATGCGCGACGTGGAAAAGTACGCACACAAGGAGGCGCGCTTAAATTTATTACCGCATTTCTCAATTGACGTGGGTGAGGCTGTATGGGCTCGACTACGAAGTAAGCCCTTGCATTTGTGATCCGAGGTGTACGGGTCTTATAGGGGTTTGGGCAGACACGGTAAAACTGCAGCGCCGCAAAACATCTGCGTTCTATGGGATACCCTCTATTTTTCACCCACTTACATTCCCAAAGCGAGAGTAAGTGAAAAAGCGCTGTCGGGGCGCAGACTATTCCTCAGAATCGCTAACCAGTTACGACGACAATTTCTCAGACAATATATGTTCCGACTATAACCATCAATCGGCCGCACCGTGACGCTGACACTACTTTCCTACCGCCTATCACGATTAGTTATAATAGCTTTACTGGATGCACGCCCGACATGCTCATAGTTTGGACTCATGTGGTAGAACTGCACACTCTCCGTTAAGCAAGCAGGGATTGCGCTTCAACGTCGTCAAAACACTCGAACTTAGCGACAGGACTTAGGTAAACGTATGTGTTGTAAAAGACACTTGCAGATTTAGGTGTTAGTGAAGCTCGGACCCATCAACGGCCCATTATCCCTCGACGCGTTAGGTTCTACGCTTTAGGTTCTCGGAAAATAACCCGGTTTCGATCGCCCTGCGCAAAACACCAAAGTCTTGAAAGTCCATAACAGTGGTCTTGGTTTAAGGCTACGTGATCAACGCCGTGGGATCTTTTAGGACGTAGCGGAAGCGCGGTCGTTGACTATTTTCACCTGCCCAGTCACCCCGCCTAATACGCGATTCGGACGTGGCTAGGCACTCAAATTATTAGGAGGTCCACAACATGTGATGTGCTTGTACAGGGCTGATTTTCTTCAGTACTAAAGTCGCGGAGACTAGGGCGAAGGTCAATGTCTTAATCCGTCTACTGTTTCTTCGCACGGGGTGCCTCGAATGACAGATTATCTTGCACCGACAGACACAAGGCCTAGAGCTGAATAGTGAAATTCTTATGGGACCCGTCAAGCTAGGTGTTTACAGAACGGATAGTAGAATATTTTAACGTCTGGCGTGCTCGGGCCATTGCTCAATAGATAGGTCTTGGTTTACCCATATAACACCCCTTGCCCCTGGGTAGAATCCGGACACGTGGTCCCTCGATACACCATCAACGGCGCCGGTCGGAGAGGTTGTCGGTTCATTTATTTTGCGTAATCAAGCGTTGGTTCTCCCGGTCTTGTAGGCAGCATGGCCAGTCTCACATTTCATCCCGTCTCAGTAGGATAACTATACGCAATTAAGGAGTCTCTCCCCACGAGTTAAAATTTGATGAGAAGGGCGCGGATCTTATGGAGTAAGGTATAGGCAACGTTGGACTGTTTTCGCCTAGAACCAACTCTGAGAGAACGATAGGTTGAGATAAGAGTATGTGTTTGCGTGTGCGTTGTAAATTATCCTTGTCATCTACCGGGTGTCAACTACGGCGTGGGTCCATAATCCGTACGATATCGACGTTCCACCCCAAAACTAGTAAACGCGGCTGCGTTTATAGTGGCGGTCTACCCCTTATTTCGTTACGTTGTCATTAGCATCGTTTACACAAGACAAAGGCCCTATCAAGCGGAGGATAAATGGTTTGGCATTCCACGCTAAGGCGTTGAGGCAATTCCTCCGTGTCTGACGGGATAGTTCTGCGGTGCTGTCGCACGAAGGAGTACGCCCGAACCAGGTTTCAAGAGGCTGTGATCTCCGTCAACATTATAAACCACCGTTGCTCGTCAGGTAATCGGAGGGGTGCGAGACAGATTTGTTCGAAGGGGAGATCCCTCGATCCACGCCCAAGATGCCGTTTGATTACCGCGTAACGGACGTCAACGAGGAATCGGTTCGAGCGAGGTTGGTTGAGTGAACCGTCCGCAACCCTACTTACTACTGATGTTGGTACCATCGTGTGCGCCGATTGGATCGGAGGATCTTCACTAGTGAAAAGGCGTTCATGGTGTGGGAGCCGGACTGCAGTATGGCTTGCTTAGACTCTACGGGGGCCATTATTATTGCAGAGTAGTTTGACTTATGAGGTGCACGAGCTTCTACGAGCTGCTTCCTACTGACCAGAGAGGGTACCTATGCGGCAATGAGTAGTACCCATAAAATGTGGAGACCCGAACCTGTCGTATTAAATCCTCTATTAATTAGGGAACTGCGTAGCAGCCGCAAGCGCCAATTCGGCTGAAAATGGAGCCCGGCACGGACATGTGCGTTATAAGGGCCATATAAGTACAGTATTTGCTGCAGATCTAAGCTACAGGCTTGCCTGGGACTGTACGGAACGTAGTTCAGGCAGTTGCTTACTATAAGCAACCCCCATGACAGCCCGCTCACCATGGTTGGCTAATCCCATTATAGCTTCTTATTGCAATACGTCGTGGTAAGCGTGAGCACGCATATGACGAGGGCATGTAGGCCGGTCGCCGGCGAGAACTTGTAATGGATAGGTCTTGAGTCTTAACTTATCCGAACTGCTTGGGAGCGGTGGTCAGACGTTATATACATGTTTCCAGTCACCAATCTTGAATCGTTCCCGAAAGATGTGGCTAGGCGCTCAGGCCGTGCGGGCCAGAATGAGACCAGCAACGATGGTTCTGTATCAGCATGTCTCTTCCAATGGCCCGCTACTGTATAGATCGAGCACTCTTTATCGAGTAATCTAGTTTGATACAGGATGAAACTACTGACCGCAGGCGCAATGCGCGTGGTCCGTCAAGCAGTGGGGCCGCTAACGACAGTAGTAGAGGGCGATAAGCCGTTCAGTTTCTACAAACAGTGGTTTCAGAGGCTTAATCGAGTACCACGAGGGAATTTCTTGGATGGTAAGGAACCATCAGCAACCGAGGGCCCTCTAAGTGAGTTATACTTCTAAGAGACTACGGGGGATACATAGCATTCTAGTGATACCACGAGAGCGGCGTGTTATACTAATCTGGTATTATACTAAAATAGGGCCCTGCGATAGGTTTATTACCTCCTGCACCTGGCACTGGCTGAATAAAGGACGGGCGCACAACCTTCTGATGCGGGTGTCACACTAGTCTTGCAGGTTTTATGATGCCGCCCGTACCGTCCCATAGGCGAATTATACTTCTGCCCTTGTCGTCTGAATGCGTGGCTAGGCAATTTCTAATCGAATAGTATCCGCTGTCGACTGAGCAACATTCATGCTTCCGGATATAACGAAGAAATAGATATTTCAATCGATGTTTCTAATGAGCTAGCTCGGGGCTTACCTTCTCGCTGCTCCTTCATGAAGCTCCTTGACCGGTGGCATCACTCTGGTTATACTCCACACTCTGCATCTGGGGAGCACCTTAGTCGAACTTCAGGTTTTGATTGACCGCACTTTATATGGGATAACGACTACCCGAGAATCTCCGTGTCAAGATGCACTAGCAGAGGAAGAGGGCAAAAGTCCTTTCCGAAAATCCCCAGGTAGTCGCCGGATACGACAAGGCCTAGACATTTCCCGCCCTCGTGCGCGATCGGATCTGTACCCATCCTATGTGTTGCGGGAGCAATTTAAACCTAACATAATATTCCAGGAAAGAGACCCTGGCTCATGAATGCTTTAATGTGAATGTAATCGACCTCGACACGCCCGTAGTCAACCTACCGTAAGACCCTCACGTACACAGACATCAAAAGGATATTAAGATCTGAATCTACATATCCTTAACGTTAGCTCTCTCAACGTATACGATAGAGGTAGACTGGTTTCTTCGAGGCGACTCGGCCGGGAGCGTTTATTTGACGAACGGTATCATGATGCCTTTGCCGTACCTTGATTGGGTGGATATCTGCGTGGGCAAGCATACAGCTGCGTCCGGAGTCCATGTTAACGCGGGATGCAATGTAATTTGATATTGCACTTGCGGAGGCCGTTTTGTCAAAAAAACAAGAGGGTTAGGTGACTTGTATTAGCACATAGACTGGTTTACGATCTACCTGACCACGTTGGAATAAACGTCTTTTTGTAGCCCCGCTGTGCGCGATCGTATGATATCCAGGTCACGGCGATGGCACATGCTCGGTAGCGTAAGGAGGCTGTTGACTAACAGTGGCATCAGACCACGAGAGAACAGCATACTACGAGGCCAGCCGTTAATGTTAATGCACAGGCTTGACAGCGTTTGAGAGGCCGGTGACTGCTTCCGCATGGAGCCTGCGGTGTAGTGCTAACCGCACCTAGGAAAGCAACTACAATCGAAATAGATGAGTACTTCGTCAACACTCTAGTAATGGGGTTCCCGGGCATCAATTGTTAAAATCGTTTGCAAGGCGTTAGCGACCACACATACTTTTCAAGTCGGCATATATATGAAGCTAGGAAGGTCGCGTTTTATTAAGCTGCGCTCTATCTGGCCTCTTGTAGCTAATAACTCCTTTCGAAGCAAGGAACTTCTATTCCTATCGCATTAGGATCGTCTGGACATTGCCAGTATCTGCGATATAGCCCTTCATTGTGCCCCCATTGCTTAGATTTCAAACGGGTCTTGGAAAAACCGACCCTATTTCAAGACCACGTCCCATCCGTTTAAATTTGGGTGTCCGGCGCTCCTGCGATGTACTACTCGCACCGAGGGACCGTGGGGACTGGTTCACACGAAGTGTTACCGGACGACGAGCCTAATACAGCGTCGGTGCACGTTTTTGTTGCTACAGCTGTGATCGGCTTATTCATCACTATCATGAGTTGTACAAGGGGTTCGGAAACGATACGTGCATGGTCGCGCGACCTCCACGACGTCAACGATTATGAGCTAAGAGTTGGGTAGCACCGACGATGAGTACCGTCCAACATGAAAACTCGCGGCCTGGGTGACAGTGTGTGGCCGTATGCCTAGGCCGGCAAACAGGCGTTTGCTACATCCCGAGGCGAGCCCTTCCTCCGTGATGCGCGCCTAACAATTCATATCAAGGTGGCTCTCAAAGCTAAGGGATGTGTGCGCAGGATAGGGATTTGCGGCTGTTGGGCGATTTCATACTATTTGGTTTTAACCGTTGAGTGCGTATTTTTCCGAAGTCATATTTAAAGGCGCGATCTAGCCTAGGCATTAACGCTGCGCTGAGCTCCCCCCGAGAATATGGAACCCCGCGCCCCTACTTACGAAAACGCCATTATCCTAATTTTTAGATATGATACAGTGTGCGGGTATTTCAAGGTTGTTAGCTGCAGCCAAGACAGCTTCATGACGGGATGGTAGAGATGATACGAACAGCCCTCCGTTCCCCAACCGGCATGGCTCCACGAGTTTGTATCAGTGGTCCACTGCTTCAATTCAAATTGTTGGTGGATTTGCCCTTATCCTCAGTTTCCTCTTTAACCCAGGTAGCTACTGAATAAAGCAGATCAGTAAAAAAAAGGACCGGTACACCATTATAGTGGGGTAAACACAGCTCGGGTCGCACCTTAGGTGGACCGCGATGGAGTCGGGCCTGCCCATGTTAGGTTCTCAGTTGACAGTTTAAAATCCATTTGTTCATTTGTGGATTGTGTACCGTCCTAAGGGTGACCAAGGTACAACCAGGCTTGGGTGTCAGCGATGACCTAATCCTCGGACGTAGGGAACTCGACCTTGCAATCCCTTGGGGCTCGGAGCTCAGGTTCCGTGCCTTTGGATGGCAGAGTGCCTGACGTGCACCGGCATCTAAGTCAGCACCGATCCTCTAGGACCGCCGCGCGCTTTCCGTATTCTCTTAATTCGTCTAATAAGAAACAGATGGGTCTTAGAACATGGAAAAGGAAAGCTGTCGGAGAACGACGACTATCCTCTAACATGTGTTAAATTGGCATGCTGCCTGTCGTGGAAGTATCCCTGCGCCTGATCTCGTCGTGCCACCCCGGCGCGAATTATCTGTGCCGTAATGCACCGAACAAAACCGTATGTAACGGAAATTTAAATTCCCGAGTTTACTAGACTTTTCTCGAGATACTCTTTCCTCTCCCACCCTGCGGACCGGTGTGCAGACGGCCCCGTTTTCAGACCGGAGAGTCAAGCGCTGTCTCCACGGGGTTAGTGACTGATTGAAACTATAGAATCCCCGAGTAAACTAGCCTTGCCATGTCGAATCATAGGACGGCCTCCCCCATTGGAATCTGCCGTTATAGACTTACACCTGGGCATCGGGGTTAAAACCCACTGGTTCCCAAGCTCAGTGACGCCGGTGCAACTTCTGAAAACAGCAGGTGGGGGTTCCCTCTCGAACTAAGCCGGGCAGTTAGCCGGATGAGGAATCATTGAGTATAGAGACTAACCCCATCCGACTCCATCTAATAGACAGTCCCCTCTTTCAACCTCGTTTCCGTGCGGTCTAGGCAGCTTGGTGATATACCGATGGCCTTTTAATGCTGCACACATTAGATCGCCGCACAGAGGGCTGCTGGTATCCTAGTATGTGGGACACTAAGACTACGGCCCGGTCTGCCAAGGTCAGGGTATGTACACGCTTTCGCACTACCAATGCTACAGCAGGGGAATAATGCGAGACTTTGAGCGAACTTTTGACATTTAAGTTCTAATGACAGCGACTTGTGCCCTCCAGTCCATACCTATGGCCGAATGGATCTTTTCTGGCCTCATATGCGTCTTGGTTCCGGACCAATGATTACCGATTGAACGCGAGGTGACATATCGTCGCCTTGGCGCTGTTCAGTTGCTCCACTGGCGCGCTGACCGGCACACTTCTTGCCGATACTTTTGAAATAGATAATCTAGGTTACGATTCCAGCCGTCATCCAGGGTTTTCTATGATCTACAGCGGGCCCAACCATTGCGGGAAGATGTACAGTGAAGCTTCATGCCTATGTCGGTTATCTTATCGTTCAATACGTGCCGCGGTTGCCGAATAGTCAGCGCTAAGGGCCGTGACACGCCTGTTACTCAATAGTAGGTCTCTCTGTTTTTGTGTCGCTGCCCCCAACTTCACTTAGGACAGAAGCCTACCTTGATAGGAGTCCGTCCCATCTAGCAATGCTGCGAGGGAGTATAGATGACTCACGTCCGTAGCTATCCGGATGGTCCACATTAGTATATCGTACCGAGCGCGTTGTGCGCCTTATGGCTGGGCAGGTCCTCCAATTATTCAATCTATAGATCCTTACCCCAGTTGGTAGATACATAGACACTT"))

#counts the number of approximate occurrences of a pattern in a text with hamming distance less or equeal than an integer d 
def approximatePatternCount(d, pattern, text):
    patternLength = len(pattern)
    count = 0
    for i in range(len(text) - patternLength +1):
        if hammingDistance(pattern, text[i:i+patternLength]) <= d:
            count+=1
    return count

# print(approximatePatternCount(2,"GGCTGAG", "TCTTGTTCTTCACAATATTCAAACGAAGATGTTAATTAAAGTTGGTTACCCATAATCACCGTACGGGGCATCCCGAAGCGTAACAATGGTGAATGTCGATCTGGTGGCAAGTGGCGTACCAACGTTCGCTGAGTAATTCGGTGGGCTGAGTCGGCCATTATGACCATCCCGTGGTTAGCGGGAGTGTGCCCCTTGCGAAGTGCTCCGTCGTGGGCCATTCGAAAAGCCACGTCCTCCGATGATTCAGAGAACAGGGTATCTGGGACAATTAGTGGTGACTAACACTGCATCGCAAGAACTCAGATAAAAATTCGAACACGCTGTGGTGGTCC"))



#########################################
##### FREQUENT WORDS WITH MISMATCHES ####

#finds all d neighbors of a pattern. A d-neighbor D of a pattern P is a string that contains maximum d mismatches with respect to P
def neighbors(pattern, d):
    #base cases
    if d == 0:
        return [pattern]
    if len(pattern) == 1:
        return ["A","C","G","T"]
    neighborhood = []
    neighborsSuffix = neighbors(pattern[1:],d)
    for suffixPattern in neighborsSuffix:
        if hammingDistance(pattern[1:], suffixPattern) == d:
            neighborhood.append(pattern[0]+suffixPattern)
        else:
            for nucl in ["A","C","G","T"]:
                neighborhood.append(nucl+suffixPattern)
    return neighborhood

# spacedPrint(neighbors("CGTTACGGA",2))


#finds the most frequent k-mers that appear in a text with at most d mismatches
def frequentWordsWithMismatches(text, k, d):
    freqTable = {}
    patterns = []
    for i in range(len(text) - k+1):
        pattern = text[i:i+k]
        neighborhood = neighbors(pattern, d)
        for neighbor in neighborhood:
            if neighbor in freqTable:
                freqTable[neighbor] += 1
            else:
                freqTable[neighbor] = 1
    maximum = maxMap(freqTable)
    for key, value in freqTable.items():
        if value == maximum:
            patterns.append(key)
    return patterns

# spacedPrint(frequentWordsWithMismatches("GGGGCAGGGGGCGTTGTGATAGGGGATACGTGGGGCAGCAGCGTCGTGGGGCAGCAGTGTGGGGGCGTCGTATAGGGGCGTATATGTGGGGGATAGGGGATACGTGGGGCGTCAGGGGGGGGGCAGCAGCAGCGTGGGGATAGGGGCGTCGTCAGATACGTCAGTGTGCAGATATGTGGGGGCAGATAGGGGATACGTGGGGGGGGCGTCAGCGTTGTGATACAGGGGGCGTCAGTGTGGGGGCGTCAGCGTTGTGCGTCAGCGTATACAGCGTATACAGCAGATAGGGGGGGGATACAGCGTCAGCGTATAGGGGATACAGGGGGATACGTATACAGTGTGGGGGTGTGATAGGGGGGGGGGGGGGGG",7,2))


#finds the most frequent k-mers that appear in a text with at most d mismatches and their reverse complements
def frequentWordsWithMismatchesAndRevCompl(text, k, d):
    freqTable = {}
    patterns = []
    for i in range(len(text) - k+1):
        pattern = text[i:i+k]
        neighborhood = neighbors(pattern, d)
      
        for neighbor in neighborhood:
            if neighbor in freqTable:
                freqTable[neighbor] += 1
            else:
                freqTable[neighbor] = 1
            
            neighbor_rc = reverseComplement(neighbor)
            if neighbor_rc in freqTable:
                freqTable[neighbor_rc] += 1
            else:
                freqTable[neighbor_rc] = 1

    maximum = maxMap(freqTable)
    for key, value in freqTable.items():
        if value == maximum:
            patterns.append(key)
    return patterns



# spacedPrint(frequentWordsWithMismatchesAndRevCompl("CTAATTTCTCTAATCGCGTTCTTAGTTTTAATTTAATAATTAGTAGAATTTCGAATTAGAATTTTTCGTAGAATTAGTTCGTTAATCTTAGCTAATAATAATTTTTAATCGCGTAGTTCGTAGTAGCGCTTTCGAATCTCTTTCTCGAATCTTAGAATTTCTAATAATCGTTCTCTCTCGAATAATTTTAGCGTAGAATCGCGCTCGTAGTAGTTAATTTCTCT",7,3))



#####################################################
#####################################################
##########FINAL CHALLENGE###########################

#finds all distinct k-mers forming (L,t)-clumps in genome. 
#A k-mer forms a (L,t)-clump if it appears at least t times in an interval of lenght L with Hamming distance at most d.   

def findClumpsWithMismatches(genome, k, l, t, d):
    patterns = []
    for i in range(len(genome) - l + 1):
        window = genome[i:i+l]
        freqTable = frequencyTable(window,k)

        for pattern, frequency in freqTable.items():
            if frequency >= t and not (pattern in patterns):
                patterns.append(pattern)
    return patterns

#print(skewDiagram(genome))
with open("../data/Salmonella_enterica.txt","r") as file_se:
    genome = file_se.read().replace('\n', '')

minSkew = minimumSkew(genome)[0]

l = 500

# freqPatterns = frequentWordsWithMismatchesAndRevCompl(genome[minSkew:minSkew+l],9,0)
# spacedPrint(freqPatterns)

# print(genome[minSkew:minSkew+l])


#####################################
##########PROBABILITY###############

def generateAllStrings(length,alphabet):
    if length == 1:
        return alphabet
    strings = []
    for character in alphabet:
        for string in generateAllStrings(length-1, alphabet):
            strings.append(character+string)
    return strings

#spacedPrint(generateAllStrings(4,['0','1']))

def probSubstring(substr, length, alphabet):
    allStrings = generateAllStrings(length, alphabet)
    count = 0
    for string in allStrings:
        if substr in string:
            count += 1
    return count/len(allStrings)

print(probSubstring("01", 25, ['0','1']))