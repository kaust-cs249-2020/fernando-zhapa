import sys
sys.path.append("../chapter1")

from _181_hammingDistance import hammingDistance
from _184_freqWordsMismatch import neighbors

def distance(string,text):
#computes the minimum Hamming distance and returns it together the the first substring of text with that distance
    patternLenght = len(string)
    closestPattern = ""
    minDistance = float("inf")
    for i in range(len(text) - patternLenght + 1):
        pattern = text[i:i+patternLenght]
        distance = hammingDistance(string, pattern)
        if distance < minDistance:
            closestPattern = pattern
            minDistance = distance
    return minDistance


def distanceAll(string, texts):
    totalDistance = sum([distance(string, text) for text in texts]) 
    return totalDistance

def medianString(k, texts):
#computes the k-mer that minimizes the distances with all the DNA strings
    distance = float("inf")
    allPatterns = neighbors(["A"]*k, k)
    median = ""
    for pattern in allPatterns:
        currDistance = distanceAll(pattern, texts)
        if  currDistance < distance:
            distance = currDistance
            median = pattern
    return median

if __name__ == "__main__": 
    # print(medianString(6,
    # [
    # "GAGCTGCGCTGTAGGTTCTACAGGTACACTTCGGCGTTTGAA",
    # "GCGTTGGTAGTTTTTGCAAACAGGTGGACCCTCCATGGCAGC",
    # "ACTCTCATGTTCCGACATCACAACGGAGAATACAGGGTTGTT",
    # "TTCCTACTGAACCCGCGCATTAAGAGCTTTAAGTTTGACAGG",
    # "AAAAGATAGGTTCCATGCCGGGGCAACAGGAGTGGACGTTTG",
    # "GATCTGCGACGTGGGCTAGCGACCAACTAATTCTCGGACAGG",
    # "TTACAGGACAGGCGATGTATGGGGTTGTTCAAGACGGCGCTG",
    # "GCACATCTGTGGTGCCTCAACAGGATTGTAGTCCAGCTGGAA",
    # "CCAACGTCGCTCTAGTACAAGTTGTAGCAGCCGCTTGACAGG",
    # "GACAGGCGCGTGTGCGGAACGTTATTATATATGGTTCAGAGA"
    # ]))

    strings = [
        "CACCACAAATTGCGGTACACTCGGGATGGAATCTCCCCTCAGGCGCGTCCATGCCACACGTCCCTCGTGATGACTGTATTCTTTGGGAGGGAGCGACGTATC ",
        "GCGAACGTCTTACTCAGCAACAGAACACACGCTGCAAACCCATCTCCCAGTTTTTTATAATATGCTATTTACAATGTCGCAATGCGTTTCGAACGCACCGGC ",
        "CCCTGCCGGGGGTCATATGTAACTACCTGCGACTTTGTCTAGAGGCCATATTCCCTGAGTAATTATAGATATACGTGCCACTAGGCGTATCAGAACGCCGTT ",
        "TAGGGTAATGCCAACATGTCGAGCGACCCAAATTTATCATATAAGCCACATCTAGCAACACCTGCGGAAGCGAACGCTATGGAGGAGAGGATCTGGCAAGCT ",
        "ACTCGTTATCTTTTACGCTTTCGCCGATATCCCCTGGCTATCGTTCGCGTACACCGGAGAGGTGAAAATCCGGTAATTACTGTTAACATTCTGCACCCCGGG ",
        "CCGCTAGGGCCCCGGCCTATCGAATGACCCAAATTGAGAGGCAAGCTGAGTCTCACCCTAGTGACTCATTAGGCATGGGGCGGGTCGGGGAGCTGTTTGGTT ",
        "TGAGGGTTGTTTCCAGACCGCATGCCACCACTATATGGTCGCTGCTCTATGTCTCCGACTTTATCTTCCTCTTCATAGCAATGAGCGGGCAGTTTGCGACGC ",
        "ATGTATTCTAAACGCTGTCAGAAGAGATAGCTATGTTGTATAGATCAACGTCAGCCTGAAGCTTTGCGGCTGTCTCTGAACTTGAATTGAAAGATATGCCTA ",
        "AATTCTGTTGCTGGCGCGGCGTCGGTTAGTCGCATCAAATTGTTAACCTTACCTAGTTTACAATCACGGTGCTTTTGGAGTTATGAAGGTGCATCTCCTTGA ",
        "GATAGAAGTTCAATTCCGAACGCGAAAGTGTAGTCCGACAAGCCAAAAGGTTGTTCGTTGGTCCTTGAGCCTAGCCACATCCCAACAGGTTCCGCGCAATCG ",
        "CGGTCGAAAGACTGTATACAACCGAGATACGATATGTGGGTAAACATGATGGACGCCTGGATACGCCCGGCGGTACGACAGCATCGCCGCTTGAGCTTAGTC ",
        "ATATGCGATTTAATTGTTTGTTATGCTAAGCCGCAGCTTTGACCATAGTGACCAGAGATCAGGATTATAGGCGTCGCAACGTCATAACCTGTCCCCACTCGC ",
        "GACATTAAGCTCCGTAGGTATGGTCTAGGCGAACGTAGTTAAGCAACGATGGGACTTCAAAACGGCAGAAACGGCACGACTTATGGAGGGGAACGGGGTTCG ",
        "TACAGCGGGCTGACGTTCTTTTAGCGTACCGTGGCCATCTTTGAGCATGAAAGAAAGGAGAGACTTCTACAGTCTTGGCATGCTCTAGGTCTCCTATCGTCT ",
        "CGGCTCGCTCCCACCCGTATGAGGTGGGCCGTTTGCGCAGTATTTTCAATTGGGTAAGACTTGCGGCAGCATTCTTGTCTTAGCGTCAGCTGGCCCGCCTGC ",
        "TTTGCCTTGTAACTGTTCGTCCGTGCTCCGTCACTGCTCTCCAATAGAGAGCCATGACGACCGATCCACTGTCAGGTCCCATCTATAGAATAAACCGATGTG ",
        "CCCTTACACGTCTTGGTCTTCTACGACTCATGACACAAGAGGATCTTGGACTACTGAGGTGTGTAAAATTAGACCACTAGATTTGAAATGCGCAGCAGGTGA ",
        "GCTAAATCTCTCCTCGGAGTAGTGTGACGTGGTTGATGGAGATGAATCAATCGTCCTTCCGCGCAAAGTATTGGCTTAGCAATTAATCGGTTGAGAAACAGG ",
        "GCGTCGCATGTGTAAAGCAGTAGTATATACAGGGTTACCGCCCTGCCCTAGAACGCCGGTTGTCGGGACAATTCGCGCACAAACTGTTTTTCTCACCGCTCT ",
        "TGAGATGTCGCTCATATCGGGTGATAAGCTTGCCGCCGATGAGTGTTGGATGGTGTGAAGACTTTCACTGACGCTGATGGGCTTTTCACCAGCGCCAGTCTA ",
        "ATAAGGGCGCCCTCCATTGGGCATACCACGTCTCTTCGCCCTGAAGTAAACCTTCGCCACAGCTTGCCCCGCGATCGTTTTCGTGTACTGGCCGATGAGAAG ",
        "AAGAGGCTGCACGTTAGGATATTACTCTACATAGTCTCCATCACGATTAACTGGAGGACTCAATTAAAGTAGGAGGTCGGGACTTATAGCTTTCCTAAGAAT ",
        "CCAGAGAAAGAGCTCACAGCTGAGTCGGTCCCTGTCATCTTTAACGTAACCACGGACCCCGTAGCCTCAGAAGAACCCAGGCTAGTGCTTTTTAGTTACTAC ",
        "TCCTTTGGGGAAGAGGAGACTGACCAGCATTATTTGCAAACTCGCAATCAACATGCCAAGAGCGGATTCCAGCGTCGCCTTATATACCATTCCAGGTTGCGG ",
        "GTGATTTTTTGGTTCGTGCCTCGCGAGGGGTGGATGCGGTACAAACCCCGAGGTCAACACATGAAGTGCGGATTGTATGCGCCGGCTAAAAACTGGCCGTAT ",
        "GGGCGAACCCATTACGCGATTTGTGTAATATTTACCCTCCGGCACCCGGTAATATATCTTGCTTATCGTAGCGGCAGTCGGTAGGAATGGTCCATCGGGTGA ",
        "GCCGGCTCTAAAGGTATGCGGGAGTATCCTATTAGCAGCCGTCAGGTGAACTCTATGTTAATGGCAGGAGGGGTCAATATTGGGCTGGCCGTGACCAGATCC ",
        "ACCTAGTTGCTACGAACGACACCGGTGCCATGTACTTATTCCTAGAGCACCTGGGGCCTTATGCCTTTTGGCAGTGACTTTCAAATCTTGTGAGCAGAATCC ",
        "AAGATCTGCATAGTGGCTTCAAACTTTCAGTATGCATGGGCGTCCATGGGTCATGTACTCCTTTCGGGGACCATCATGCATGGCGGGTACTTGCTTGTATTG ",
        "TGCTCGGATGATACAGCCCCACCATGACTATAGGGCCTACGTAACGGGCTACGCAAACGTGAGGTACTGACACATGTCTGTGGCACGCCAGAGATCCCCACA ",
        "CAACAGCCTGTATTACAATCTAGAGCGTATGCTCGCTTACCGATAGCGATATGAGGTCGCAAAGGGTCCGAAGGGGCTATGAAGTCGGTATGGTTCTGAATT ",
        "ATCCCAAACACCCGTCTTAGATCCCATAGGACGGTCCAGTCGATCTGTACCGGTAACGCGATCGCGCACCAAGATTACCGGGCCCACTAAACGCGTTAAACT ",
        "AGACGGTCATAGCTTTTTCCCAGGGAGTCTTCCGAAAACCAGAAGACTTTAGTTATGGCGATGAAGGATTATTTATTCCTACTACATTTCTGCGCGTCCCCA ",
        "TCCTAGGTTGTCACTGGTGTTCAAAGACGTGACCCAGGACTGCTGTCAACAACCGTAACACTAACATGATGTCGTCCGGCTGTAAGGAACACCTGAAAGATT ",
        "AGTTCTTTGTGGCAGCGGGTAGCCATGTTCATAAACGGGGGACAGCGGTTCTGTGGTCTAACATTAAATACACTAGTTGAGTCGGTAGGACGCAGTCTCAGC ",
        "ACGGACCTCGATTCACCGCACACCTTGGGTTAGACTCGCCAATTGGCGTATCACACGTTCGACCCCTTCAGGGTATGTCTAGGAAATCGGGGCAGTGAAATC ",
        "CTACGTTGGGGGAGTCGTAAAGTGCCTCGCAATGGCTCCACAAGCGGGAAAGCACATCATTTTCACCGACTTTCGTAAGAGTCTCGGTTCAGTCTACTACGG",
        
    ]


    

    print(distanceAll("CTTGTC", strings))